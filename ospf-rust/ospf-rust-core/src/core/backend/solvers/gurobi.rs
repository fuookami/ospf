/* automatically generated by rust-bindgen 0.57.0 */

extern crate libc;

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const GRB_VERSION_MAJOR: u32 = 8;
pub const GRB_VERSION_MINOR: u32 = 1;
pub const GRB_VERSION_TECHNICAL: u32 = 0;
pub const DEFAULT_CS_PRIORITY: u32 = 0;
pub const MAX_CS_PRIORITY: u32 = 100;
pub const DEFAULT_CS_PORT: u32 = 61000;
pub const DEFAULT_CS_HANGUP: u32 = 60;
pub const GRB_ERROR_OUT_OF_MEMORY: u32 = 10001;
pub const GRB_ERROR_NULL_ARGUMENT: u32 = 10002;
pub const GRB_ERROR_INVALID_ARGUMENT: u32 = 10003;
pub const GRB_ERROR_UNKNOWN_ATTRIBUTE: u32 = 10004;
pub const GRB_ERROR_DATA_NOT_AVAILABLE: u32 = 10005;
pub const GRB_ERROR_INDEX_OUT_OF_RANGE: u32 = 10006;
pub const GRB_ERROR_UNKNOWN_PARAMETER: u32 = 10007;
pub const GRB_ERROR_VALUE_OUT_OF_RANGE: u32 = 10008;
pub const GRB_ERROR_NO_LICENSE: u32 = 10009;
pub const GRB_ERROR_SIZE_LIMIT_EXCEEDED: u32 = 10010;
pub const GRB_ERROR_CALLBACK: u32 = 10011;
pub const GRB_ERROR_FILE_READ: u32 = 10012;
pub const GRB_ERROR_FILE_WRITE: u32 = 10013;
pub const GRB_ERROR_NUMERIC: u32 = 10014;
pub const GRB_ERROR_IIS_NOT_INFEASIBLE: u32 = 10015;
pub const GRB_ERROR_NOT_FOR_MIP: u32 = 10016;
pub const GRB_ERROR_OPTIMIZATION_IN_PROGRESS: u32 = 10017;
pub const GRB_ERROR_DUPLICATES: u32 = 10018;
pub const GRB_ERROR_NODEFILE: u32 = 10019;
pub const GRB_ERROR_Q_NOT_PSD: u32 = 10020;
pub const GRB_ERROR_QCP_EQUALITY_CONSTRAINT: u32 = 10021;
pub const GRB_ERROR_NETWORK: u32 = 10022;
pub const GRB_ERROR_JOB_REJECTED: u32 = 10023;
pub const GRB_ERROR_NOT_SUPPORTED: u32 = 10024;
pub const GRB_ERROR_EXCEED_2B_NONZEROS: u32 = 10025;
pub const GRB_ERROR_INVALID_PIECEWISE_OBJ: u32 = 10026;
pub const GRB_ERROR_UPDATEMODE_CHANGE: u32 = 10027;
pub const GRB_ERROR_CLOUD: u32 = 10028;
pub const GRB_ERROR_MODEL_MODIFICATION: u32 = 10029;
pub const GRB_ERROR_CSWORKER: u32 = 10030;
pub const GRB_ERROR_TUNE_MODEL_TYPES: u32 = 10031;
pub const GRB_LESS_EQUAL: u8 = 60u8;
pub const GRB_GREATER_EQUAL: u8 = 62u8;
pub const GRB_EQUAL: u8 = 61u8;
pub const GRB_CONTINUOUS: u8 = 67u8;
pub const GRB_BINARY: u8 = 66u8;
pub const GRB_INTEGER: u8 = 73u8;
pub const GRB_SEMICONT: u8 = 83u8;
pub const GRB_SEMIINT: u8 = 78u8;
pub const GRB_MINIMIZE: u32 = 1;
pub const GRB_MAXIMIZE: i32 = -1;
pub const GRB_SOS_TYPE1: u32 = 1;
pub const GRB_SOS_TYPE2: u32 = 2;
pub const GRB_INFINITY : f64 = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const GRB_UNDEFINED : f64 = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const GRB_MAXINT: u32 = 2000000000;
pub const GRB_MAX_NAMELEN: u32 = 255;
pub const GRB_MAX_STRLEN: u32 = 512;
pub const GRB_MAX_CONCURRENT: u32 = 64;
pub const GRB_INT_ATTR_NUMCONSTRS: &'static [u8; 11usize] = b"NumConstrs\0";
pub const GRB_INT_ATTR_NUMVARS: &'static [u8; 8usize] = b"NumVars\0";
pub const GRB_INT_ATTR_NUMSOS: &'static [u8; 7usize] = b"NumSOS\0";
pub const GRB_INT_ATTR_NUMQCONSTRS: &'static [u8; 12usize] = b"NumQConstrs\0";
pub const GRB_INT_ATTR_NUMGENCONSTRS: &'static [u8; 14usize] = b"NumGenConstrs\0";
pub const GRB_INT_ATTR_NUMNZS: &'static [u8; 7usize] = b"NumNZs\0";
pub const GRB_DBL_ATTR_DNUMNZS: &'static [u8; 8usize] = b"DNumNZs\0";
pub const GRB_INT_ATTR_NUMQNZS: &'static [u8; 8usize] = b"NumQNZs\0";
pub const GRB_INT_ATTR_NUMQCNZS: &'static [u8; 9usize] = b"NumQCNZs\0";
pub const GRB_INT_ATTR_NUMINTVARS: &'static [u8; 11usize] = b"NumIntVars\0";
pub const GRB_INT_ATTR_NUMBINVARS: &'static [u8; 11usize] = b"NumBinVars\0";
pub const GRB_INT_ATTR_NUMPWLOBJVARS: &'static [u8; 14usize] = b"NumPWLObjVars\0";
pub const GRB_STR_ATTR_MODELNAME: &'static [u8; 10usize] = b"ModelName\0";
pub const GRB_INT_ATTR_MODELSENSE: &'static [u8; 11usize] = b"ModelSense\0";
pub const GRB_DBL_ATTR_OBJCON: &'static [u8; 7usize] = b"ObjCon\0";
pub const GRB_INT_ATTR_IS_MIP: &'static [u8; 6usize] = b"IsMIP\0";
pub const GRB_INT_ATTR_IS_QP: &'static [u8; 5usize] = b"IsQP\0";
pub const GRB_INT_ATTR_IS_QCP: &'static [u8; 6usize] = b"IsQCP\0";
pub const GRB_INT_ATTR_IS_MULTIOBJ: &'static [u8; 11usize] = b"IsMultiObj\0";
pub const GRB_STR_ATTR_SERVER: &'static [u8; 7usize] = b"Server\0";
pub const GRB_STR_ATTR_JOBID: &'static [u8; 6usize] = b"JobID\0";
pub const GRB_INT_ATTR_LICENSE_EXPIRATION: &'static [u8; 18usize] = b"LicenseExpiration\0";
pub const GRB_DBL_ATTR_LB: &'static [u8; 3usize] = b"LB\0";
pub const GRB_DBL_ATTR_UB: &'static [u8; 3usize] = b"UB\0";
pub const GRB_DBL_ATTR_OBJ: &'static [u8; 4usize] = b"Obj\0";
pub const GRB_CHAR_ATTR_VTYPE: &'static [u8; 6usize] = b"VType\0";
pub const GRB_DBL_ATTR_START: &'static [u8; 6usize] = b"Start\0";
pub const GRB_DBL_ATTR_PSTART: &'static [u8; 7usize] = b"PStart\0";
pub const GRB_INT_ATTR_BRANCHPRIORITY: &'static [u8; 15usize] = b"BranchPriority\0";
pub const GRB_STR_ATTR_VARNAME: &'static [u8; 8usize] = b"VarName\0";
pub const GRB_INT_ATTR_PWLOBJCVX: &'static [u8; 10usize] = b"PWLObjCvx\0";
pub const GRB_DBL_ATTR_VARHINTVAL: &'static [u8; 11usize] = b"VarHintVal\0";
pub const GRB_INT_ATTR_VARHINTPRI: &'static [u8; 11usize] = b"VarHintPri\0";
pub const GRB_INT_ATTR_PARTITION: &'static [u8; 10usize] = b"Partition\0";
pub const GRB_DBL_ATTR_RHS: &'static [u8; 4usize] = b"RHS\0";
pub const GRB_DBL_ATTR_DSTART: &'static [u8; 7usize] = b"DStart\0";
pub const GRB_CHAR_ATTR_SENSE: &'static [u8; 6usize] = b"Sense\0";
pub const GRB_STR_ATTR_CONSTRNAME: &'static [u8; 11usize] = b"ConstrName\0";
pub const GRB_INT_ATTR_LAZY: &'static [u8; 5usize] = b"Lazy\0";
pub const GRB_DBL_ATTR_QCRHS: &'static [u8; 6usize] = b"QCRHS\0";
pub const GRB_CHAR_ATTR_QCSENSE: &'static [u8; 8usize] = b"QCSense\0";
pub const GRB_STR_ATTR_QCNAME: &'static [u8; 7usize] = b"QCName\0";
pub const GRB_INT_ATTR_GENCONSTRTYPE: &'static [u8; 14usize] = b"GenConstrType\0";
pub const GRB_STR_ATTR_GENCONSTRNAME: &'static [u8; 14usize] = b"GenConstrName\0";
pub const GRB_DBL_ATTR_MAX_COEFF: &'static [u8; 9usize] = b"MaxCoeff\0";
pub const GRB_DBL_ATTR_MIN_COEFF: &'static [u8; 9usize] = b"MinCoeff\0";
pub const GRB_DBL_ATTR_MAX_BOUND: &'static [u8; 9usize] = b"MaxBound\0";
pub const GRB_DBL_ATTR_MIN_BOUND: &'static [u8; 9usize] = b"MinBound\0";
pub const GRB_DBL_ATTR_MAX_OBJ_COEFF: &'static [u8; 12usize] = b"MaxObjCoeff\0";
pub const GRB_DBL_ATTR_MIN_OBJ_COEFF: &'static [u8; 12usize] = b"MinObjCoeff\0";
pub const GRB_DBL_ATTR_MAX_RHS: &'static [u8; 7usize] = b"MaxRHS\0";
pub const GRB_DBL_ATTR_MIN_RHS: &'static [u8; 7usize] = b"MinRHS\0";
pub const GRB_DBL_ATTR_MAX_QCCOEFF: &'static [u8; 11usize] = b"MaxQCCoeff\0";
pub const GRB_DBL_ATTR_MIN_QCCOEFF: &'static [u8; 11usize] = b"MinQCCoeff\0";
pub const GRB_DBL_ATTR_MAX_QOBJ_COEFF: &'static [u8; 13usize] = b"MaxQObjCoeff\0";
pub const GRB_DBL_ATTR_MIN_QOBJ_COEFF: &'static [u8; 13usize] = b"MinQObjCoeff\0";
pub const GRB_DBL_ATTR_MAX_QCLCOEFF: &'static [u8; 12usize] = b"MaxQCLCoeff\0";
pub const GRB_DBL_ATTR_MIN_QCLCOEFF: &'static [u8; 12usize] = b"MinQCLCoeff\0";
pub const GRB_DBL_ATTR_MAX_QCRHS: &'static [u8; 9usize] = b"MaxQCRHS\0";
pub const GRB_DBL_ATTR_MIN_QCRHS: &'static [u8; 9usize] = b"MinQCRHS\0";
pub const GRB_DBL_ATTR_RUNTIME: &'static [u8; 8usize] = b"Runtime\0";
pub const GRB_INT_ATTR_STATUS: &'static [u8; 7usize] = b"Status\0";
pub const GRB_DBL_ATTR_OBJVAL: &'static [u8; 7usize] = b"ObjVal\0";
pub const GRB_DBL_ATTR_OBJBOUND: &'static [u8; 9usize] = b"ObjBound\0";
pub const GRB_DBL_ATTR_OBJBOUNDC: &'static [u8; 10usize] = b"ObjBoundC\0";
pub const GRB_DBL_ATTR_POOLOBJBOUND: &'static [u8; 13usize] = b"PoolObjBound\0";
pub const GRB_DBL_ATTR_POOLOBJVAL: &'static [u8; 11usize] = b"PoolObjVal\0";
pub const GRB_DBL_ATTR_MIPGAP: &'static [u8; 7usize] = b"MIPGap\0";
pub const GRB_INT_ATTR_SOLCOUNT: &'static [u8; 9usize] = b"SolCount\0";
pub const GRB_DBL_ATTR_ITERCOUNT: &'static [u8; 10usize] = b"IterCount\0";
pub const GRB_INT_ATTR_BARITERCOUNT: &'static [u8; 13usize] = b"BarIterCount\0";
pub const GRB_DBL_ATTR_NODECOUNT: &'static [u8; 10usize] = b"NodeCount\0";
pub const GRB_DBL_ATTR_OPENNODECOUNT: &'static [u8; 14usize] = b"OpenNodeCount\0";
pub const GRB_INT_ATTR_HASDUALNORM: &'static [u8; 12usize] = b"HasDualNorm\0";
pub const GRB_DBL_ATTR_X: &'static [u8; 2usize] = b"X\0";
pub const GRB_DBL_ATTR_XN: &'static [u8; 3usize] = b"Xn\0";
pub const GRB_DBL_ATTR_BARX: &'static [u8; 5usize] = b"BarX\0";
pub const GRB_DBL_ATTR_RC: &'static [u8; 3usize] = b"RC\0";
pub const GRB_DBL_ATTR_VDUALNORM: &'static [u8; 10usize] = b"VDualNorm\0";
pub const GRB_INT_ATTR_VBASIS: &'static [u8; 7usize] = b"VBasis\0";
pub const GRB_DBL_ATTR_PI: &'static [u8; 3usize] = b"Pi\0";
pub const GRB_DBL_ATTR_QCPI: &'static [u8; 5usize] = b"QCPi\0";
pub const GRB_DBL_ATTR_SLACK: &'static [u8; 6usize] = b"Slack\0";
pub const GRB_DBL_ATTR_QCSLACK: &'static [u8; 8usize] = b"QCSlack\0";
pub const GRB_DBL_ATTR_CDUALNORM: &'static [u8; 10usize] = b"CDualNorm\0";
pub const GRB_INT_ATTR_CBASIS: &'static [u8; 7usize] = b"CBasis\0";
pub const GRB_DBL_ATTR_BOUND_VIO: &'static [u8; 9usize] = b"BoundVio\0";
pub const GRB_DBL_ATTR_BOUND_SVIO: &'static [u8; 10usize] = b"BoundSVio\0";
pub const GRB_INT_ATTR_BOUND_VIO_INDEX: &'static [u8; 14usize] = b"BoundVioIndex\0";
pub const GRB_INT_ATTR_BOUND_SVIO_INDEX: &'static [u8; 15usize] = b"BoundSVioIndex\0";
pub const GRB_DBL_ATTR_BOUND_VIO_SUM: &'static [u8; 12usize] = b"BoundVioSum\0";
pub const GRB_DBL_ATTR_BOUND_SVIO_SUM: &'static [u8; 13usize] = b"BoundSVioSum\0";
pub const GRB_DBL_ATTR_CONSTR_VIO: &'static [u8; 10usize] = b"ConstrVio\0";
pub const GRB_DBL_ATTR_CONSTR_SVIO: &'static [u8; 11usize] = b"ConstrSVio\0";
pub const GRB_INT_ATTR_CONSTR_VIO_INDEX: &'static [u8; 15usize] = b"ConstrVioIndex\0";
pub const GRB_INT_ATTR_CONSTR_SVIO_INDEX: &'static [u8; 16usize] = b"ConstrSVioIndex\0";
pub const GRB_DBL_ATTR_CONSTR_VIO_SUM: &'static [u8; 13usize] = b"ConstrVioSum\0";
pub const GRB_DBL_ATTR_CONSTR_SVIO_SUM: &'static [u8; 14usize] = b"ConstrSVioSum\0";
pub const GRB_DBL_ATTR_CONSTR_RESIDUAL: &'static [u8; 15usize] = b"ConstrResidual\0";
pub const GRB_DBL_ATTR_CONSTR_SRESIDUAL: &'static [u8; 16usize] = b"ConstrSResidual\0";
pub const GRB_INT_ATTR_CONSTR_RESIDUAL_INDEX: &'static [u8; 20usize] = b"ConstrResidualIndex\0";
pub const GRB_INT_ATTR_CONSTR_SRESIDUAL_INDEX: &'static [u8; 21usize] = b"ConstrSResidualIndex\0";
pub const GRB_DBL_ATTR_CONSTR_RESIDUAL_SUM: &'static [u8; 18usize] = b"ConstrResidualSum\0";
pub const GRB_DBL_ATTR_CONSTR_SRESIDUAL_SUM: &'static [u8; 19usize] = b"ConstrSResidualSum\0";
pub const GRB_DBL_ATTR_DUAL_VIO: &'static [u8; 8usize] = b"DualVio\0";
pub const GRB_DBL_ATTR_DUAL_SVIO: &'static [u8; 9usize] = b"DualSVio\0";
pub const GRB_INT_ATTR_DUAL_VIO_INDEX: &'static [u8; 13usize] = b"DualVioIndex\0";
pub const GRB_INT_ATTR_DUAL_SVIO_INDEX: &'static [u8; 14usize] = b"DualSVioIndex\0";
pub const GRB_DBL_ATTR_DUAL_VIO_SUM: &'static [u8; 11usize] = b"DualVioSum\0";
pub const GRB_DBL_ATTR_DUAL_SVIO_SUM: &'static [u8; 12usize] = b"DualSVioSum\0";
pub const GRB_DBL_ATTR_DUAL_RESIDUAL: &'static [u8; 13usize] = b"DualResidual\0";
pub const GRB_DBL_ATTR_DUAL_SRESIDUAL: &'static [u8; 14usize] = b"DualSResidual\0";
pub const GRB_INT_ATTR_DUAL_RESIDUAL_INDEX: &'static [u8; 18usize] = b"DualResidualIndex\0";
pub const GRB_INT_ATTR_DUAL_SRESIDUAL_INDEX: &'static [u8; 19usize] = b"DualSResidualIndex\0";
pub const GRB_DBL_ATTR_DUAL_RESIDUAL_SUM: &'static [u8; 16usize] = b"DualResidualSum\0";
pub const GRB_DBL_ATTR_DUAL_SRESIDUAL_SUM: &'static [u8; 17usize] = b"DualSResidualSum\0";
pub const GRB_DBL_ATTR_INT_VIO: &'static [u8; 7usize] = b"IntVio\0";
pub const GRB_INT_ATTR_INT_VIO_INDEX: &'static [u8; 12usize] = b"IntVioIndex\0";
pub const GRB_DBL_ATTR_INT_VIO_SUM: &'static [u8; 10usize] = b"IntVioSum\0";
pub const GRB_DBL_ATTR_COMPL_VIO: &'static [u8; 9usize] = b"ComplVio\0";
pub const GRB_INT_ATTR_COMPL_VIO_INDEX: &'static [u8; 14usize] = b"ComplVioIndex\0";
pub const GRB_DBL_ATTR_COMPL_VIO_SUM: &'static [u8; 12usize] = b"ComplVioSum\0";
pub const GRB_DBL_ATTR_KAPPA: &'static [u8; 6usize] = b"Kappa\0";
pub const GRB_DBL_ATTR_KAPPA_EXACT: &'static [u8; 11usize] = b"KappaExact\0";
pub const GRB_DBL_ATTR_N2KAPPA: &'static [u8; 8usize] = b"N2Kappa\0";
pub const GRB_DBL_ATTR_SA_OBJLOW: &'static [u8; 9usize] = b"SAObjLow\0";
pub const GRB_DBL_ATTR_SA_OBJUP: &'static [u8; 8usize] = b"SAObjUp\0";
pub const GRB_DBL_ATTR_SA_LBLOW: &'static [u8; 8usize] = b"SALBLow\0";
pub const GRB_DBL_ATTR_SA_LBUP: &'static [u8; 7usize] = b"SALBUp\0";
pub const GRB_DBL_ATTR_SA_UBLOW: &'static [u8; 8usize] = b"SAUBLow\0";
pub const GRB_DBL_ATTR_SA_UBUP: &'static [u8; 7usize] = b"SAUBUp\0";
pub const GRB_DBL_ATTR_SA_RHSLOW: &'static [u8; 9usize] = b"SARHSLow\0";
pub const GRB_DBL_ATTR_SA_RHSUP: &'static [u8; 8usize] = b"SARHSUp\0";
pub const GRB_INT_ATTR_IIS_MINIMAL: &'static [u8; 11usize] = b"IISMinimal\0";
pub const GRB_INT_ATTR_IIS_LB: &'static [u8; 6usize] = b"IISLB\0";
pub const GRB_INT_ATTR_IIS_UB: &'static [u8; 6usize] = b"IISUB\0";
pub const GRB_INT_ATTR_IIS_CONSTR: &'static [u8; 10usize] = b"IISConstr\0";
pub const GRB_INT_ATTR_IIS_SOS: &'static [u8; 7usize] = b"IISSOS\0";
pub const GRB_INT_ATTR_IIS_QCONSTR: &'static [u8; 11usize] = b"IISQConstr\0";
pub const GRB_INT_ATTR_IIS_GENCONSTR: &'static [u8; 13usize] = b"IISGenConstr\0";
pub const GRB_INT_ATTR_TUNE_RESULTCOUNT: &'static [u8; 16usize] = b"TuneResultCount\0";
pub const GRB_DBL_ATTR_FARKASDUAL: &'static [u8; 11usize] = b"FarkasDual\0";
pub const GRB_DBL_ATTR_FARKASPROOF: &'static [u8; 12usize] = b"FarkasProof\0";
pub const GRB_DBL_ATTR_UNBDRAY: &'static [u8; 8usize] = b"UnbdRay\0";
pub const GRB_INT_ATTR_INFEASVAR: &'static [u8; 10usize] = b"InfeasVar\0";
pub const GRB_INT_ATTR_UNBDVAR: &'static [u8; 8usize] = b"UnbdVar\0";
pub const GRB_INT_ATTR_VARPRESTAT: &'static [u8; 11usize] = b"VarPreStat\0";
pub const GRB_DBL_ATTR_PREFIXVAL: &'static [u8; 10usize] = b"PreFixVal\0";
pub const GRB_DBL_ATTR_OBJN: &'static [u8; 5usize] = b"ObjN\0";
pub const GRB_DBL_ATTR_OBJNVAL: &'static [u8; 8usize] = b"ObjNVal\0";
pub const GRB_DBL_ATTR_OBJNCON: &'static [u8; 8usize] = b"ObjNCon\0";
pub const GRB_DBL_ATTR_OBJNWEIGHT: &'static [u8; 11usize] = b"ObjNWeight\0";
pub const GRB_INT_ATTR_OBJNPRIORITY: &'static [u8; 13usize] = b"ObjNPriority\0";
pub const GRB_DBL_ATTR_OBJNRELTOL: &'static [u8; 11usize] = b"ObjNRelTol\0";
pub const GRB_DBL_ATTR_OBJNABSTOL: &'static [u8; 11usize] = b"ObjNAbsTol\0";
pub const GRB_STR_ATTR_OBJNNAME: &'static [u8; 9usize] = b"ObjNName\0";
pub const GRB_INT_ATTR_NUMOBJ: &'static [u8; 7usize] = b"NumObj\0";
pub const GRB_INT_ATTR_NUMSTART: &'static [u8; 9usize] = b"NumStart\0";
pub const GRB_DBL_ATTR_Xn: &'static [u8; 3usize] = b"Xn\0";
pub const GRB_GENCONSTR_MAX: u32 = 0;
pub const GRB_GENCONSTR_MIN: u32 = 1;
pub const GRB_GENCONSTR_ABS: u32 = 2;
pub const GRB_GENCONSTR_AND: u32 = 3;
pub const GRB_GENCONSTR_OR: u32 = 4;
pub const GRB_GENCONSTR_INDICATOR: u32 = 5;
pub const GRB_CB_POLLING: u32 = 0;
pub const GRB_CB_PRESOLVE: u32 = 1;
pub const GRB_CB_SIMPLEX: u32 = 2;
pub const GRB_CB_MIP: u32 = 3;
pub const GRB_CB_MIPSOL: u32 = 4;
pub const GRB_CB_MIPNODE: u32 = 5;
pub const GRB_CB_MESSAGE: u32 = 6;
pub const GRB_CB_BARRIER: u32 = 7;
pub const GRB_CB_MULTIOBJ: u32 = 8;
pub const GRB_CB_PRE_COLDEL: u32 = 1000;
pub const GRB_CB_PRE_ROWDEL: u32 = 1001;
pub const GRB_CB_PRE_SENCHG: u32 = 1002;
pub const GRB_CB_PRE_BNDCHG: u32 = 1003;
pub const GRB_CB_PRE_COECHG: u32 = 1004;
pub const GRB_CB_SPX_ITRCNT: u32 = 2000;
pub const GRB_CB_SPX_OBJVAL: u32 = 2001;
pub const GRB_CB_SPX_PRIMINF: u32 = 2002;
pub const GRB_CB_SPX_DUALINF: u32 = 2003;
pub const GRB_CB_SPX_ISPERT: u32 = 2004;
pub const GRB_CB_MIP_OBJBST: u32 = 3000;
pub const GRB_CB_MIP_OBJBND: u32 = 3001;
pub const GRB_CB_MIP_NODCNT: u32 = 3002;
pub const GRB_CB_MIP_SOLCNT: u32 = 3003;
pub const GRB_CB_MIP_CUTCNT: u32 = 3004;
pub const GRB_CB_MIP_NODLFT: u32 = 3005;
pub const GRB_CB_MIP_ITRCNT: u32 = 3006;
pub const GRB_CB_MIP_OBJBNDC: u32 = 3007;
pub const GRB_CB_MIPSOL_SOL: u32 = 4001;
pub const GRB_CB_MIPSOL_OBJ: u32 = 4002;
pub const GRB_CB_MIPSOL_OBJBST: u32 = 4003;
pub const GRB_CB_MIPSOL_OBJBND: u32 = 4004;
pub const GRB_CB_MIPSOL_NODCNT: u32 = 4005;
pub const GRB_CB_MIPSOL_SOLCNT: u32 = 4006;
pub const GRB_CB_MIPSOL_OBJBNDC: u32 = 4007;
pub const GRB_CB_MIPNODE_STATUS: u32 = 5001;
pub const GRB_CB_MIPNODE_REL: u32 = 5002;
pub const GRB_CB_MIPNODE_OBJBST: u32 = 5003;
pub const GRB_CB_MIPNODE_OBJBND: u32 = 5004;
pub const GRB_CB_MIPNODE_NODCNT: u32 = 5005;
pub const GRB_CB_MIPNODE_SOLCNT: u32 = 5006;
pub const GRB_CB_MIPNODE_BRVAR: u32 = 5007;
pub const GRB_CB_MIPNODE_OBJBNDC: u32 = 5008;
pub const GRB_CB_MSG_STRING: u32 = 6001;
pub const GRB_CB_RUNTIME: u32 = 6002;
pub const GRB_CB_BARRIER_ITRCNT: u32 = 7001;
pub const GRB_CB_BARRIER_PRIMOBJ: u32 = 7002;
pub const GRB_CB_BARRIER_DUALOBJ: u32 = 7003;
pub const GRB_CB_BARRIER_PRIMINF: u32 = 7004;
pub const GRB_CB_BARRIER_DUALINF: u32 = 7005;
pub const GRB_CB_BARRIER_COMPL: u32 = 7006;
pub const GRB_CB_MULTIOBJ_OBJCNT: u32 = 8001;
pub const GRB_CB_MULTIOBJ_SOLCNT: u32 = 8002;
pub const GRB_CB_MULTIOBJ_SOL: u32 = 8003;
pub const GRB_FEASRELAX_LINEAR: u32 = 0;
pub const GRB_FEASRELAX_QUADRATIC: u32 = 1;
pub const GRB_FEASRELAX_CARDINALITY: u32 = 2;
pub const GRB_LOADED: u32 = 1;
pub const GRB_OPTIMAL: u32 = 2;
pub const GRB_INFEASIBLE: u32 = 3;
pub const GRB_INF_OR_UNBD: u32 = 4;
pub const GRB_UNBOUNDED: u32 = 5;
pub const GRB_CUTOFF: u32 = 6;
pub const GRB_ITERATION_LIMIT: u32 = 7;
pub const GRB_NODE_LIMIT: u32 = 8;
pub const GRB_TIME_LIMIT: u32 = 9;
pub const GRB_SOLUTION_LIMIT: u32 = 10;
pub const GRB_INTERRUPTED: u32 = 11;
pub const GRB_NUMERIC: u32 = 12;
pub const GRB_SUBOPTIMAL: u32 = 13;
pub const GRB_INPROGRESS: u32 = 14;
pub const GRB_USER_OBJ_LIMIT: u32 = 15;
pub const GRB_BASIC: u32 = 0;
pub const GRB_NONBASIC_LOWER: i32 = -1;
pub const GRB_NONBASIC_UPPER: i32 = -2;
pub const GRB_SUPERBASIC: i32 = -3;
pub const GRB_INT_PAR_BARITERLIMIT: &'static [u8; 13usize] = b"BarIterLimit\0";
pub const GRB_DBL_PAR_CUTOFF: &'static [u8; 7usize] = b"Cutoff\0";
pub const GRB_DBL_PAR_ITERATIONLIMIT: &'static [u8; 15usize] = b"IterationLimit\0";
pub const GRB_DBL_PAR_NODELIMIT: &'static [u8; 10usize] = b"NodeLimit\0";
pub const GRB_INT_PAR_SOLUTIONLIMIT: &'static [u8; 14usize] = b"SolutionLimit\0";
pub const GRB_DBL_PAR_TIMELIMIT: &'static [u8; 10usize] = b"TimeLimit\0";
pub const GRB_DBL_PAR_BESTOBJSTOP: &'static [u8; 12usize] = b"BestObjStop\0";
pub const GRB_DBL_PAR_BESTBDSTOP: &'static [u8; 11usize] = b"BestBdStop\0";
pub const GRB_DBL_PAR_FEASIBILITYTOL: &'static [u8; 15usize] = b"FeasibilityTol\0";
pub const GRB_DBL_PAR_INTFEASTOL: &'static [u8; 11usize] = b"IntFeasTol\0";
pub const GRB_DBL_PAR_MARKOWITZTOL: &'static [u8; 13usize] = b"MarkowitzTol\0";
pub const GRB_DBL_PAR_MIPGAP: &'static [u8; 7usize] = b"MIPGap\0";
pub const GRB_DBL_PAR_MIPGAPABS: &'static [u8; 10usize] = b"MIPGapAbs\0";
pub const GRB_DBL_PAR_OPTIMALITYTOL: &'static [u8; 14usize] = b"OptimalityTol\0";
pub const GRB_DBL_PAR_PSDTOL: &'static [u8; 7usize] = b"PSDTol\0";
pub const GRB_INT_PAR_METHOD: &'static [u8; 7usize] = b"Method\0";
pub const GRB_DBL_PAR_PERTURBVALUE: &'static [u8; 13usize] = b"PerturbValue\0";
pub const GRB_DBL_PAR_OBJSCALE: &'static [u8; 9usize] = b"ObjScale\0";
pub const GRB_INT_PAR_SCALEFLAG: &'static [u8; 10usize] = b"ScaleFlag\0";
pub const GRB_INT_PAR_SIMPLEXPRICING: &'static [u8; 15usize] = b"SimplexPricing\0";
pub const GRB_INT_PAR_QUAD: &'static [u8; 5usize] = b"Quad\0";
pub const GRB_INT_PAR_NORMADJUST: &'static [u8; 11usize] = b"NormAdjust\0";
pub const GRB_INT_PAR_SIFTING: &'static [u8; 8usize] = b"Sifting\0";
pub const GRB_INT_PAR_SIFTMETHOD: &'static [u8; 11usize] = b"SiftMethod\0";
pub const GRB_DBL_PAR_BARCONVTOL: &'static [u8; 11usize] = b"BarConvTol\0";
pub const GRB_INT_PAR_BARCORRECTORS: &'static [u8; 14usize] = b"BarCorrectors\0";
pub const GRB_INT_PAR_BARHOMOGENEOUS: &'static [u8; 15usize] = b"BarHomogeneous\0";
pub const GRB_INT_PAR_BARORDER: &'static [u8; 9usize] = b"BarOrder\0";
pub const GRB_DBL_PAR_BARQCPCONVTOL: &'static [u8; 14usize] = b"BarQCPConvTol\0";
pub const GRB_INT_PAR_CROSSOVER: &'static [u8; 10usize] = b"Crossover\0";
pub const GRB_INT_PAR_CROSSOVERBASIS: &'static [u8; 15usize] = b"CrossoverBasis\0";
pub const GRB_INT_PAR_BRANCHDIR: &'static [u8; 10usize] = b"BranchDir\0";
pub const GRB_INT_PAR_DEGENMOVES: &'static [u8; 11usize] = b"DegenMoves\0";
pub const GRB_INT_PAR_DISCONNECTED: &'static [u8; 13usize] = b"Disconnected\0";
pub const GRB_DBL_PAR_HEURISTICS: &'static [u8; 11usize] = b"Heuristics\0";
pub const GRB_DBL_PAR_IMPROVESTARTGAP: &'static [u8; 16usize] = b"ImproveStartGap\0";
pub const GRB_DBL_PAR_IMPROVESTARTTIME: &'static [u8; 17usize] = b"ImproveStartTime\0";
pub const GRB_DBL_PAR_IMPROVESTARTNODES: &'static [u8; 18usize] = b"ImproveStartNodes\0";
pub const GRB_INT_PAR_MINRELNODES: &'static [u8; 12usize] = b"MinRelNodes\0";
pub const GRB_INT_PAR_MIPFOCUS: &'static [u8; 9usize] = b"MIPFocus\0";
pub const GRB_STR_PAR_NODEFILEDIR: &'static [u8; 12usize] = b"NodefileDir\0";
pub const GRB_DBL_PAR_NODEFILESTART: &'static [u8; 14usize] = b"NodefileStart\0";
pub const GRB_INT_PAR_NODEMETHOD: &'static [u8; 11usize] = b"NodeMethod\0";
pub const GRB_INT_PAR_NORELHEURISTIC: &'static [u8; 15usize] = b"NoRelHeuristic\0";
pub const GRB_INT_PAR_PUMPPASSES: &'static [u8; 11usize] = b"PumpPasses\0";
pub const GRB_INT_PAR_RINS: &'static [u8; 5usize] = b"RINS\0";
pub const GRB_INT_PAR_STARTNODELIMIT: &'static [u8; 15usize] = b"StartNodeLimit\0";
pub const GRB_INT_PAR_SUBMIPNODES: &'static [u8; 12usize] = b"SubMIPNodes\0";
pub const GRB_INT_PAR_SYMMETRY: &'static [u8; 9usize] = b"Symmetry\0";
pub const GRB_INT_PAR_VARBRANCH: &'static [u8; 10usize] = b"VarBranch\0";
pub const GRB_INT_PAR_SOLUTIONNUMBER: &'static [u8; 15usize] = b"SolutionNumber\0";
pub const GRB_INT_PAR_ZEROOBJNODES: &'static [u8; 13usize] = b"ZeroObjNodes\0";
pub const GRB_INT_PAR_CUTS: &'static [u8; 5usize] = b"Cuts\0";
pub const GRB_INT_PAR_CLIQUECUTS: &'static [u8; 11usize] = b"CliqueCuts\0";
pub const GRB_INT_PAR_COVERCUTS: &'static [u8; 10usize] = b"CoverCuts\0";
pub const GRB_INT_PAR_FLOWCOVERCUTS: &'static [u8; 14usize] = b"FlowCoverCuts\0";
pub const GRB_INT_PAR_FLOWPATHCUTS: &'static [u8; 13usize] = b"FlowPathCuts\0";
pub const GRB_INT_PAR_GUBCOVERCUTS: &'static [u8; 13usize] = b"GUBCoverCuts\0";
pub const GRB_INT_PAR_IMPLIEDCUTS: &'static [u8; 12usize] = b"ImpliedCuts\0";
pub const GRB_INT_PAR_PROJIMPLIEDCUTS: &'static [u8; 16usize] = b"ProjImpliedCuts\0";
pub const GRB_INT_PAR_MIPSEPCUTS: &'static [u8; 11usize] = b"MIPSepCuts\0";
pub const GRB_INT_PAR_MIRCUTS: &'static [u8; 8usize] = b"MIRCuts\0";
pub const GRB_INT_PAR_STRONGCGCUTS: &'static [u8; 13usize] = b"StrongCGCuts\0";
pub const GRB_INT_PAR_MODKCUTS: &'static [u8; 9usize] = b"ModKCuts\0";
pub const GRB_INT_PAR_ZEROHALFCUTS: &'static [u8; 13usize] = b"ZeroHalfCuts\0";
pub const GRB_INT_PAR_NETWORKCUTS: &'static [u8; 12usize] = b"NetworkCuts\0";
pub const GRB_INT_PAR_SUBMIPCUTS: &'static [u8; 11usize] = b"SubMIPCuts\0";
pub const GRB_INT_PAR_INFPROOFCUTS: &'static [u8; 13usize] = b"InfProofCuts\0";
pub const GRB_INT_PAR_CUTAGGPASSES: &'static [u8; 13usize] = b"CutAggPasses\0";
pub const GRB_INT_PAR_CUTPASSES: &'static [u8; 10usize] = b"CutPasses\0";
pub const GRB_INT_PAR_GOMORYPASSES: &'static [u8; 13usize] = b"GomoryPasses\0";
pub const GRB_STR_PAR_WORKERPOOL: &'static [u8; 11usize] = b"WorkerPool\0";
pub const GRB_STR_PAR_WORKERPASSWORD: &'static [u8; 15usize] = b"WorkerPassword\0";
pub const GRB_INT_PAR_AGGREGATE: &'static [u8; 10usize] = b"Aggregate\0";
pub const GRB_INT_PAR_AGGFILL: &'static [u8; 8usize] = b"AggFill\0";
pub const GRB_INT_PAR_CONCURRENTMIP: &'static [u8; 14usize] = b"ConcurrentMIP\0";
pub const GRB_INT_PAR_CONCURRENTJOBS: &'static [u8; 15usize] = b"ConcurrentJobs\0";
pub const GRB_INT_PAR_DISPLAYINTERVAL: &'static [u8; 16usize] = b"DisplayInterval\0";
pub const GRB_INT_PAR_DISTRIBUTEDMIPJOBS: &'static [u8; 19usize] = b"DistributedMIPJobs\0";
pub const GRB_INT_PAR_DUALREDUCTIONS: &'static [u8; 15usize] = b"DualReductions\0";
pub const GRB_DBL_PAR_FEASRELAXBIGM: &'static [u8; 14usize] = b"FeasRelaxBigM\0";
pub const GRB_INT_PAR_IISMETHOD: &'static [u8; 10usize] = b"IISMethod\0";
pub const GRB_INT_PAR_INFUNBDINFO: &'static [u8; 12usize] = b"InfUnbdInfo\0";
pub const GRB_INT_PAR_LAZYCONSTRAINTS: &'static [u8; 16usize] = b"LazyConstraints\0";
pub const GRB_STR_PAR_LOGFILE: &'static [u8; 8usize] = b"LogFile\0";
pub const GRB_INT_PAR_LOGTOCONSOLE: &'static [u8; 13usize] = b"LogToConsole\0";
pub const GRB_INT_PAR_MIQCPMETHOD: &'static [u8; 12usize] = b"MIQCPMethod\0";
pub const GRB_INT_PAR_NUMERICFOCUS: &'static [u8; 13usize] = b"NumericFocus\0";
pub const GRB_INT_PAR_OUTPUTFLAG: &'static [u8; 11usize] = b"OutputFlag\0";
pub const GRB_INT_PAR_PRECRUSH: &'static [u8; 9usize] = b"PreCrush\0";
pub const GRB_INT_PAR_PREDEPROW: &'static [u8; 10usize] = b"PreDepRow\0";
pub const GRB_INT_PAR_PREDUAL: &'static [u8; 8usize] = b"PreDual\0";
pub const GRB_INT_PAR_PREPASSES: &'static [u8; 10usize] = b"PrePasses\0";
pub const GRB_INT_PAR_PREQLINEARIZE: &'static [u8; 14usize] = b"PreQLinearize\0";
pub const GRB_INT_PAR_PRESOLVE: &'static [u8; 9usize] = b"Presolve\0";
pub const GRB_DBL_PAR_PRESOS1BIGM: &'static [u8; 12usize] = b"PreSOS1BigM\0";
pub const GRB_DBL_PAR_PRESOS2BIGM: &'static [u8; 12usize] = b"PreSOS2BigM\0";
pub const GRB_INT_PAR_PRESPARSIFY: &'static [u8; 12usize] = b"PreSparsify\0";
pub const GRB_INT_PAR_PREMIQCPFORM: &'static [u8; 13usize] = b"PreMIQCPForm\0";
pub const GRB_INT_PAR_QCPDUAL: &'static [u8; 8usize] = b"QCPDual\0";
pub const GRB_INT_PAR_RECORD: &'static [u8; 7usize] = b"Record\0";
pub const GRB_STR_PAR_RESULTFILE: &'static [u8; 11usize] = b"ResultFile\0";
pub const GRB_INT_PAR_SEED: &'static [u8; 5usize] = b"Seed\0";
pub const GRB_INT_PAR_THREADS: &'static [u8; 8usize] = b"Threads\0";
pub const GRB_DBL_PAR_TUNETIMELIMIT: &'static [u8; 14usize] = b"TuneTimeLimit\0";
pub const GRB_INT_PAR_TUNERESULTS: &'static [u8; 12usize] = b"TuneResults\0";
pub const GRB_INT_PAR_TUNECRITERION: &'static [u8; 14usize] = b"TuneCriterion\0";
pub const GRB_INT_PAR_TUNETRIALS: &'static [u8; 11usize] = b"TuneTrials\0";
pub const GRB_INT_PAR_TUNEOUTPUT: &'static [u8; 11usize] = b"TuneOutput\0";
pub const GRB_INT_PAR_TUNEJOBS: &'static [u8; 9usize] = b"TuneJobs\0";
pub const GRB_INT_PAR_UPDATEMODE: &'static [u8; 11usize] = b"UpdateMode\0";
pub const GRB_INT_PAR_OBJNUMBER: &'static [u8; 10usize] = b"ObjNumber\0";
pub const GRB_INT_PAR_MULTIOBJMETHOD: &'static [u8; 15usize] = b"MultiObjMethod\0";
pub const GRB_INT_PAR_MULTIOBJPRE: &'static [u8; 12usize] = b"MultiObjPre\0";
pub const GRB_INT_PAR_POOLSOLUTIONS: &'static [u8; 14usize] = b"PoolSolutions\0";
pub const GRB_DBL_PAR_POOLGAP: &'static [u8; 8usize] = b"PoolGap\0";
pub const GRB_INT_PAR_POOLSEARCHMODE: &'static [u8; 15usize] = b"PoolSearchMode\0";
pub const GRB_INT_PAR_IGNORENAMES: &'static [u8; 12usize] = b"IgnoreNames\0";
pub const GRB_INT_PAR_STARTNUMBER: &'static [u8; 12usize] = b"StartNumber\0";
pub const GRB_INT_PAR_PARTITIONPLACE: &'static [u8; 15usize] = b"PartitionPlace\0";
pub const GRB_STR_PAR_COMPUTESERVER: &'static [u8; 14usize] = b"ComputeServer\0";
pub const GRB_STR_PAR_TOKENSERVER: &'static [u8; 12usize] = b"TokenServer\0";
pub const GRB_STR_PAR_SERVERPASSWORD: &'static [u8; 15usize] = b"ServerPassword\0";
pub const GRB_INT_PAR_SERVERTIMEOUT: &'static [u8; 14usize] = b"ServerTimeout\0";
pub const GRB_STR_PAR_CSROUTER: &'static [u8; 9usize] = b"CSRouter\0";
pub const GRB_STR_PAR_CSGROUP: &'static [u8; 8usize] = b"CSGroup\0";
pub const GRB_DBL_PAR_CSQUEUETIMEOUT: &'static [u8; 15usize] = b"CSQueueTimeout\0";
pub const GRB_INT_PAR_CSPRIORITY: &'static [u8; 11usize] = b"CSPriority\0";
pub const GRB_INT_PAR_CSIDLETIMEOUT: &'static [u8; 14usize] = b"CSIdleTimeout\0";
pub const GRB_INT_PAR_CSTLSINSECURE: &'static [u8; 12usize] = b"TLSInsecure\0";
pub const GRB_INT_PAR_TSPORT: &'static [u8; 7usize] = b"TSPort\0";
pub const GRB_STR_PAR_CLOUDACCESSID: &'static [u8; 14usize] = b"CloudAccessID\0";
pub const GRB_STR_PAR_CLOUDSECRETKEY: &'static [u8; 15usize] = b"CloudSecretKey\0";
pub const GRB_STR_PAR_CLOUDPOOL: &'static [u8; 10usize] = b"CloudPool\0";
pub const GRB_STR_PAR_CLOUDHOST: &'static [u8; 10usize] = b"CloudHost\0";
pub const GRB_STR_PAR_DUMMY: &'static [u8; 6usize] = b"Dummy\0";
pub const GRB_CUTS_AUTO: i32 = -1;
pub const GRB_CUTS_OFF: u32 = 0;
pub const GRB_CUTS_CONSERVATIVE: u32 = 1;
pub const GRB_CUTS_AGGRESSIVE: u32 = 2;
pub const GRB_CUTS_VERYAGGRESSIVE: u32 = 3;
pub const GRB_PRESOLVE_AUTO: i32 = -1;
pub const GRB_PRESOLVE_OFF: u32 = 0;
pub const GRB_PRESOLVE_CONSERVATIVE: u32 = 1;
pub const GRB_PRESOLVE_AGGRESSIVE: u32 = 2;
pub const GRB_METHOD_AUTO: i32 = -1;
pub const GRB_METHOD_PRIMAL: u32 = 0;
pub const GRB_METHOD_DUAL: u32 = 1;
pub const GRB_METHOD_BARRIER: u32 = 2;
pub const GRB_METHOD_CONCURRENT: u32 = 3;
pub const GRB_METHOD_DETERMINISTIC_CONCURRENT: u32 = 4;
pub const GRB_METHOD_DETERMINISTIC_CONCURRENT_SIMPLEX: u32 = 5;
pub const GRB_BARHOMOGENEOUS_AUTO: i32 = -1;
pub const GRB_BARHOMOGENEOUS_OFF: u32 = 0;
pub const GRB_BARHOMOGENEOUS_ON: u32 = 1;
pub const GRB_MIPFOCUS_BALANCED: u32 = 0;
pub const GRB_MIPFOCUS_FEASIBILITY: u32 = 1;
pub const GRB_MIPFOCUS_OPTIMALITY: u32 = 2;
pub const GRB_MIPFOCUS_BESTBOUND: u32 = 3;
pub const GRB_BARORDER_AUTOMATIC: i32 = -1;
pub const GRB_BARORDER_AMD: u32 = 0;
pub const GRB_BARORDER_NESTEDDISSECTION: u32 = 1;
pub const GRB_SIMPLEXPRICING_AUTO: i32 = -1;
pub const GRB_SIMPLEXPRICING_PARTIAL: u32 = 0;
pub const GRB_SIMPLEXPRICING_STEEPEST_EDGE: u32 = 1;
pub const GRB_SIMPLEXPRICING_DEVEX: u32 = 2;
pub const GRB_SIMPLEXPRICING_STEEPEST_QUICK: u32 = 3;
pub const GRB_VARBRANCH_AUTO: i32 = -1;
pub const GRB_VARBRANCH_PSEUDO_REDUCED: u32 = 0;
pub const GRB_VARBRANCH_PSEUDO_SHADOW: u32 = 1;
pub const GRB_VARBRANCH_MAX_INFEAS: u32 = 2;
pub const GRB_VARBRANCH_STRONG: u32 = 3;
pub const GRB_PARTITION_EARLY: u32 = 16;
pub const GRB_PARTITION_ROOTSTART: u32 = 8;
pub const GRB_PARTITION_ROOTEND: u32 = 4;
pub const GRB_PARTITION_NODES: u32 = 2;
pub const GRB_PARTITION_CLEANUP: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRBmodel {
    _unused: [u8; 0],
}
pub type GRBmodel = _GRBmodel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRBenv {
    _unused: [u8; 0],
}
pub type GRBenv = _GRBenv;
extern "C" {
    pub fn GRBgetattrinfo(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        datatypeP: *mut ::std::os::raw::c_int,
        sizeP: *mut ::std::os::raw::c_int,
        settableP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBisattravailable(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetintattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        valueP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetintattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        newvalue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetintattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        valueP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetintattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        newvalue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetintattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        values: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetintattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        newvalues: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetintattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        values: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetintattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        newvalues: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcharattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        valueP: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetcharattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        newvalue: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcharattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        values: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetcharattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        newvalues: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcharattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        values: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetcharattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        newvalues: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBgetdblattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        valueP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetdblattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        newvalue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetdblattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        valueP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetdblattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        newvalue: f64,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBgetdblattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        values: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetdblattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        newvalues: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetdblattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        values: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetdblattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        newvalues: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        valueP: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetstrattr(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        newvalue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        valueP: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetstrattrelement(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        element: ::std::os::raw::c_int,
        newvalue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        values: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetstrattrarray(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        first: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        newvalues: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        values: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetstrattrlist(
        model: *mut GRBmodel,
        attrname: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        newvalues: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetcallbackfunc(
        model: *mut GRBmodel,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        usrdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcallbackfunc(
        model: *mut GRBmodel,
        cbP: *mut ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetlogcallbackfunc(
        model: *mut GRBmodel,
        cb: ::std::option::Option<
            unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetlogcallbackfuncenv(
        env: *mut GRBenv,
        cb: ::std::option::Option<
            unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcbget(
        cbdata: *mut ::std::os::raw::c_void,
        where_: ::std::os::raw::c_int,
        what: ::std::os::raw::c_int,
        resultP: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcbsetparam(
        cbdata: *mut ::std::os::raw::c_void,
        paramname: *const ::std::os::raw::c_char,
        newvalue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcbsolution(
        cbdata: *mut ::std::os::raw::c_void,
        solution: *const f64,
        objvalP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcbcut(
        cbdata: *mut ::std::os::raw::c_void,
        cutlen: ::std::os::raw::c_int,
        cutind: *const ::std::os::raw::c_int,
        cutval: *const f64,
        cutsense: ::std::os::raw::c_char,
        cutrhs: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcblazy(
        cbdata: *mut ::std::os::raw::c_void,
        lazylen: ::std::os::raw::c_int,
        lazyind: *const ::std::os::raw::c_int,
        lazyval: *const f64,
        lazysense: ::std::os::raw::c_char,
        lazyrhs: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcoeff(
        model: *mut GRBmodel,
        constr: ::std::os::raw::c_int,
        var: ::std::os::raw::c_int,
        valP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetconstrs(
        model: *mut GRBmodel,
        numnzP: *mut ::std::os::raw::c_int,
        cbeg: *mut ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXgetconstrs(
        model: *mut GRBmodel,
        numnzP: *mut size_t,
        cbeg: *mut size_t,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetvars(
        model: *mut GRBmodel,
        numnzP: *mut ::std::os::raw::c_int,
        vbeg: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXgetvars(
        model: *mut GRBmodel,
        numnzP: *mut size_t,
        vbeg: *mut size_t,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetsos(
        model: *mut GRBmodel,
        nummembersP: *mut ::std::os::raw::c_int,
        sostype: *mut ::std::os::raw::c_int,
        beg: *mut ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        weight: *mut f64,
        start: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrMax(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        resvarP: *mut ::std::os::raw::c_int,
        nvarsP: *mut ::std::os::raw::c_int,
        vars: *mut ::std::os::raw::c_int,
        constantP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrMin(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        resvarP: *mut ::std::os::raw::c_int,
        nvarsP: *mut ::std::os::raw::c_int,
        vars: *mut ::std::os::raw::c_int,
        constantP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrAbs(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        resvarP: *mut ::std::os::raw::c_int,
        argvarP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrAnd(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        resvarP: *mut ::std::os::raw::c_int,
        nvarsP: *mut ::std::os::raw::c_int,
        vars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrOr(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        resvarP: *mut ::std::os::raw::c_int,
        nvarsP: *mut ::std::os::raw::c_int,
        vars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetgenconstrIndicator(
        model: *mut GRBmodel,
        genconstr: ::std::os::raw::c_int,
        binvarP: *mut ::std::os::raw::c_int,
        binvalP: *mut ::std::os::raw::c_int,
        nvarsP: *mut ::std::os::raw::c_int,
        vars: *mut ::std::os::raw::c_int,
        vals: *mut f64,
        senseP: *mut ::std::os::raw::c_char,
        rhsP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetq(
        model: *mut GRBmodel,
        numqnzP: *mut ::std::os::raw::c_int,
        qrow: *mut ::std::os::raw::c_int,
        qcol: *mut ::std::os::raw::c_int,
        qval: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetqconstr(
        model: *mut GRBmodel,
        qconstr: ::std::os::raw::c_int,
        numlnzP: *mut ::std::os::raw::c_int,
        lind: *mut ::std::os::raw::c_int,
        lval: *mut f64,
        numqnzP: *mut ::std::os::raw::c_int,
        qrow: *mut ::std::os::raw::c_int,
        qcol: *mut ::std::os::raw::c_int,
        qval: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetvarbyname(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        indexP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetconstrbyname(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        indexP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetpwlobj(
        model: *mut GRBmodel,
        var: ::std::os::raw::c_int,
        pointsP: *mut ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBoptimize(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBoptimizeasync(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcopymodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBfixedmodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBfeasrelax(
        model: *mut GRBmodel,
        relaxobjtype: ::std::os::raw::c_int,
        minrelax: ::std::os::raw::c_int,
        lbpen: *mut f64,
        ubpen: *mut f64,
        rhspen: *mut f64,
        feasobjP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetcbwhatinfo(
        cbdata: *mut ::std::os::raw::c_void,
        what: ::std::os::raw::c_int,
        typeP: *mut ::std::os::raw::c_int,
        sizeP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBrelaxmodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBconverttofixed(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBpresolvemodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBiismodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBfeasibility(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBlinearizemodel(model: *mut GRBmodel) -> *mut GRBmodel;
}
extern "C" {
    pub fn GRBloadenvsyscb(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        malloccb: ::std::option::Option<
            unsafe extern "C" fn(
                size: size_t,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        calloccb: ::std::option::Option<
            unsafe extern "C" fn(
                nmemb: size_t,
                size: size_t,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        realloccb: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                size: size_t,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        freecb: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ),
        >,
        threadcreatecb: ::std::option::Option<
            unsafe extern "C" fn(
                threadP: *mut *mut ::std::os::raw::c_void,
                start_routine: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
                >,
                arg: *mut ::std::os::raw::c_void,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        threadjoincb: ::std::option::Option<
            unsafe extern "C" fn(
                thread: *mut ::std::os::raw::c_void,
                syscbusrdata: *mut ::std::os::raw::c_void,
            ),
        >,
        syscbusrdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBreadmodel(
        env: *mut GRBenv,
        filename: *const ::std::os::raw::c_char,
        modelP: *mut *mut GRBmodel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBread(
        model: *mut GRBmodel,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBwrite(
        model: *mut GRBmodel,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBismodelfile(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBfiletype(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBisrecordfile(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBnewmodel(
        env: *mut GRBenv,
        modelP: *mut *mut GRBmodel,
        Pname: *const ::std::os::raw::c_char,
        numvars: ::std::os::raw::c_int,
        obj: *mut f64,
        lb: *mut f64,
        ub: *mut f64,
        vtype: *mut ::std::os::raw::c_char,
        varnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadmodel(
        env: *mut GRBenv,
        modelP: *mut *mut GRBmodel,
        Pname: *const ::std::os::raw::c_char,
        numvars: ::std::os::raw::c_int,
        numconstrs: ::std::os::raw::c_int,
        objsense: ::std::os::raw::c_int,
        objcon: f64,
        obj: *mut f64,
        sense: *mut ::std::os::raw::c_char,
        rhs: *mut f64,
        vbeg: *mut ::std::os::raw::c_int,
        vlen: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        lb: *mut f64,
        ub: *mut f64,
        vtype: *mut ::std::os::raw::c_char,
        varnames: *mut *mut ::std::os::raw::c_char,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXloadmodel(
        env: *mut GRBenv,
        modelP: *mut *mut GRBmodel,
        Pname: *const ::std::os::raw::c_char,
        numvars: ::std::os::raw::c_int,
        numconstrs: ::std::os::raw::c_int,
        objsense: ::std::os::raw::c_int,
        objcon: f64,
        obj: *mut f64,
        sense: *mut ::std::os::raw::c_char,
        rhs: *mut f64,
        vbeg: *mut size_t,
        vlen: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        lb: *mut f64,
        ub: *mut f64,
        vtype: *mut ::std::os::raw::c_char,
        varnames: *mut *mut ::std::os::raw::c_char,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBaddvar(
        model: *mut GRBmodel,
        numnz: ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        obj: f64,
        lb: f64,
        ub: f64,
        vtype: ::std::os::raw::c_char,
        varname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddvars(
        model: *mut GRBmodel,
        numvars: ::std::os::raw::c_int,
        numnz: ::std::os::raw::c_int,
        vbeg: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        obj: *mut f64,
        lb: *mut f64,
        ub: *mut f64,
        vtype: *mut ::std::os::raw::c_char,
        varnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXaddvars(
        model: *mut GRBmodel,
        numvars: ::std::os::raw::c_int,
        numnz: size_t,
        vbeg: *mut size_t,
        vind: *mut ::std::os::raw::c_int,
        vval: *mut f64,
        obj: *mut f64,
        lb: *mut f64,
        ub: *mut f64,
        vtype: *mut ::std::os::raw::c_char,
        varnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBaddconstr(
        model: *mut GRBmodel,
        numnz: ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        sense: ::std::os::raw::c_char,
        rhs: f64,
        constrname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddconstrs(
        model: *mut GRBmodel,
        numconstrs: ::std::os::raw::c_int,
        numnz: ::std::os::raw::c_int,
        cbeg: *mut ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        sense: *mut ::std::os::raw::c_char,
        rhs: *mut f64,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXaddconstrs(
        model: *mut GRBmodel,
        numconstrs: ::std::os::raw::c_int,
        numnz: size_t,
        cbeg: *mut size_t,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        sense: *mut ::std::os::raw::c_char,
        rhs: *mut f64,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddrangeconstr(
        model: *mut GRBmodel,
        numnz: ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        lower: f64,
        upper: f64,
        constrname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddrangeconstrs(
        model: *mut GRBmodel,
        numconstrs: ::std::os::raw::c_int,
        numnz: ::std::os::raw::c_int,
        cbeg: *mut ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        lower: *mut f64,
        upper: *mut f64,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXaddrangeconstrs(
        model: *mut GRBmodel,
        numconstrs: ::std::os::raw::c_int,
        numnz: size_t,
        cbeg: *mut size_t,
        cind: *mut ::std::os::raw::c_int,
        cval: *mut f64,
        lower: *mut f64,
        upper: *mut f64,
        constrnames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddsos(
        model: *mut GRBmodel,
        numsos: ::std::os::raw::c_int,
        nummembers: ::std::os::raw::c_int,
        types: *mut ::std::os::raw::c_int,
        beg: *mut ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        weight: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrMax(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        resvar: ::std::os::raw::c_int,
        nvars: ::std::os::raw::c_int,
        vars: *const ::std::os::raw::c_int,
        constant: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrMin(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        resvar: ::std::os::raw::c_int,
        nvars: ::std::os::raw::c_int,
        vars: *const ::std::os::raw::c_int,
        constant: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrAbs(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        resvar: ::std::os::raw::c_int,
        argvar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrAnd(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        resvar: ::std::os::raw::c_int,
        nvars: ::std::os::raw::c_int,
        vars: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrOr(
        model: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        resvar: ::std::os::raw::c_int,
        nvars: ::std::os::raw::c_int,
        vars: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddgenconstrIndicator(
        lp: *mut GRBmodel,
        name: *const ::std::os::raw::c_char,
        binvar: ::std::os::raw::c_int,
        binval: ::std::os::raw::c_int,
        nvars: ::std::os::raw::c_int,
        vars: *const ::std::os::raw::c_int,
        vals: *const f64,
        sense: ::std::os::raw::c_char,
        rhs: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddqconstr(
        model: *mut GRBmodel,
        numlnz: ::std::os::raw::c_int,
        lind: *mut ::std::os::raw::c_int,
        lval: *mut f64,
        numqnz: ::std::os::raw::c_int,
        qrow: *mut ::std::os::raw::c_int,
        qcol: *mut ::std::os::raw::c_int,
        qval: *mut f64,
        sense: ::std::os::raw::c_char,
        rhs: f64,
        QCname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddcone(
        model: *mut GRBmodel,
        nummembers: ::std::os::raw::c_int,
        members: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBaddqpterms(
        model: *mut GRBmodel,
        numqnz: ::std::os::raw::c_int,
        qrow: *mut ::std::os::raw::c_int,
        qcol: *mut ::std::os::raw::c_int,
        qval: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelvars(
        model: *mut GRBmodel,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelconstrs(
        model: *mut GRBmodel,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelsos(
        model: *mut GRBmodel,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelgenconstrs(
        model: *mut GRBmodel,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelqconstrs(
        model: *mut GRBmodel,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBdelq(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBchgcoeffs(
        model: *mut GRBmodel,
        cnt: ::std::os::raw::c_int,
        cind: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBXchgcoeffs(
        model: *mut GRBmodel,
        cnt: size_t,
        cind: *mut ::std::os::raw::c_int,
        vind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetpwlobj(
        model: *mut GRBmodel,
        var: ::std::os::raw::c_int,
        points: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBupdatemodel(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBreset(model: *mut GRBmodel, clearall: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBresetmodel(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBfreemodel(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcomputeIIS(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRBsvec {
    pub len: ::std::os::raw::c_int,
    pub ind: *mut ::std::os::raw::c_int,
    pub val: *mut f64,
}
#[test]
fn bindgen_test_layout__GRBsvec() {
    assert_eq!(
        ::std::mem::size_of::<_GRBsvec>(),
        24usize,
        concat!("Size of: ", stringify!(_GRBsvec))
    );
    assert_eq!(
        ::std::mem::align_of::<_GRBsvec>(),
        8usize,
        concat!("Alignment of ", stringify!(_GRBsvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GRBsvec>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GRBsvec),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GRBsvec>())).ind as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GRBsvec),
            "::",
            stringify!(ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GRBsvec>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_GRBsvec),
            "::",
            stringify!(val)
        )
    );
}
pub type GRBsvec = _GRBsvec;
extern "C" {
    pub fn GRBFSolve(
        model: *mut GRBmodel,
        b: *mut GRBsvec,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBBinvColj(
        model: *mut GRBmodel,
        j: ::std::os::raw::c_int,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBBinvj(
        model: *mut GRBmodel,
        j: ::std::os::raw::c_int,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBBSolve(
        model: *mut GRBmodel,
        b: *mut GRBsvec,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBBinvi(
        model: *mut GRBmodel,
        i: ::std::os::raw::c_int,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBBinvRowi(
        model: *mut GRBmodel,
        i: ::std::os::raw::c_int,
        x: *mut GRBsvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetBasisHead(
        model: *mut GRBmodel,
        bhead: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcbstoponemultiobj(
        model: *mut GRBmodel,
        cbdata: *mut ::std::os::raw::c_void,
        objnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBstrongbranch(
        model: *mut GRBmodel,
        num: ::std::os::raw::c_int,
        cand: *mut ::std::os::raw::c_int,
        downobjbd: *mut f64,
        upobjbd: *mut f64,
        statusP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcheckmodel(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetsignal(model: *mut GRBmodel);
}
extern "C" {
    pub fn GRBterminate(model: *mut GRBmodel);
}
extern "C" {
    pub fn GRBreplay(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetobjective(
        model: *mut GRBmodel,
        sense: ::std::os::raw::c_int,
        constant: f64,
        lnz: ::std::os::raw::c_int,
        lind: *mut ::std::os::raw::c_int,
        lval: *mut f64,
        qnz: ::std::os::raw::c_int,
        qrow: *mut ::std::os::raw::c_int,
        qcol: *mut ::std::os::raw::c_int,
        qval: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetobjectiven(
        model: *mut GRBmodel,
        index: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
        weight: f64,
        abstol: f64,
        reltol: f64,
        name: *const ::std::os::raw::c_char,
        constant: f64,
        lnz: ::std::os::raw::c_int,
        lind: *mut ::std::os::raw::c_int,
        lval: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBclean2(
        lenP: *mut ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    );
}
extern "C" {
    pub fn GRBclean3(
        lenP: *mut ::std::os::raw::c_int,
        ind0: *mut ::std::os::raw::c_int,
        ind1: *mut ::std::os::raw::c_int,
        val: *mut f64,
    );
}
extern "C" {
    pub fn GRBmsg(env: *mut GRBenv, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn GRBgetlogfile(env: *mut GRBenv, logfileP: *mut *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetlogfile(env: *mut GRBenv, logfile: *mut FILE) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBgetintparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetdblparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetintparaminfo(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut ::std::os::raw::c_int,
        minP: *mut ::std::os::raw::c_int,
        maxP: *mut ::std::os::raw::c_int,
        defP: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetdblparaminfo(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut f64,
        minP: *mut f64,
        maxP: *mut f64,
        defP: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetstrparaminfo(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        valueP: *mut ::std::os::raw::c_char,
        defP: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetintparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetdblparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsetstrparam(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetparamtype(
        env: *mut GRBenv,
        paramname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBresetparams(env: *mut GRBenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBcopyparams(dest: *mut GRBenv, src: *mut GRBenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBwriteparams(
        env: *mut GRBenv,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBreadparams(
        env: *mut GRBenv,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetnumparams(env: *mut GRBenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetparamname(
        env: *mut GRBenv,
        i: ::std::os::raw::c_int,
        paramnameP: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetnumattributes(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetattrname(
        model: *mut GRBmodel,
        i: ::std::os::raw::c_int,
        attrnameP: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "gurobi81")]
extern "C" {
    pub fn GRBloadenv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBemptyenv(envP: *mut *mut GRBenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBemptyenvadv(
        envP: *mut *mut GRBenv,
        apitype: ::std::os::raw::c_int,
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        tech: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBstartenv(env: *mut GRBenv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadenvadv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        apitype: ::std::os::raw::c_int,
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        tech: ::std::os::raw::c_int,
        server: *const ::std::os::raw::c_char,
        router: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
        idletimeout: ::std::os::raw::c_int,
        accessid: *const ::std::os::raw::c_char,
        secretkey: *const ::std::os::raw::c_char,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        usrdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadenvadv2(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        apitype: ::std::os::raw::c_int,
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        tech: ::std::os::raw::c_int,
        server: *const ::std::os::raw::c_char,
        router: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
        idletimeout: ::std::os::raw::c_int,
        accessid: *const ::std::os::raw::c_char,
        secretkey: *const ::std::os::raw::c_char,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        usrdata: *mut ::std::os::raw::c_void,
        logcb: ::std::option::Option<
            unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadclientenv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        computeserver: *const ::std::os::raw::c_char,
        router: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        tls_insecure: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
        timeout: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadclientenvadv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        computeserver: *const ::std::os::raw::c_char,
        router: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        tls_insecure: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
        timeout: f64,
        apitype: ::std::os::raw::c_int,
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        tech: ::std::os::raw::c_int,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        usrdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadcloudenv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        accessID: *const ::std::os::raw::c_char,
        secretKey: *const ::std::os::raw::c_char,
        pool: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBloadcloudenvadv(
        envP: *mut *mut GRBenv,
        logfilename: *const ::std::os::raw::c_char,
        accessID: *const ::std::os::raw::c_char,
        secretKey: *const ::std::os::raw::c_char,
        pool: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_int,
        apitype: ::std::os::raw::c_int,
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        tech: ::std::os::raw::c_int,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                model: *mut GRBmodel,
                cbdata: *mut ::std::os::raw::c_void,
                where_: ::std::os::raw::c_int,
                usrdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        usrdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgetenv(model: *mut GRBmodel) -> *mut GRBenv;
}
extern "C" {
    pub fn GRBgetconcurrentenv(model: *mut GRBmodel, num: ::std::os::raw::c_int) -> *mut GRBenv;
}
extern "C" {
    pub fn GRBdiscardconcurrentenvs(model: *mut GRBmodel);
}
extern "C" {
    pub fn GRBgetmultiobjenv(model: *mut GRBmodel, num: ::std::os::raw::c_int) -> *mut GRBenv;
}
extern "C" {
    pub fn GRBdiscardmultiobjenvs(model: *mut GRBmodel);
}
extern "C" {
    pub fn GRBreleaselicense(env: *mut GRBenv);
}
extern "C" {
    pub fn GRBfreeenv(env: *mut GRBenv);
}
extern "C" {
    pub fn GRBgeterrormsg(env: *mut GRBenv) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GRBgetmerrormsg(model: *mut GRBmodel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GRBversion(
        majorP: *mut ::std::os::raw::c_int,
        minorP: *mut ::std::os::raw::c_int,
        technicalP: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GRBplatform() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GRBlisttokens() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBtunemodel(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBtunemodels(
        nummodels: ::std::os::raw::c_int,
        models: *mut *mut GRBmodel,
        ignore: *mut GRBmodel,
        hint: *mut GRBmodel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgettuneresult(
        model: *mut GRBmodel,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBgettunelog(
        model: *mut GRBmodel,
        i: ::std::os::raw::c_int,
        logP: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBtunemodeladv(
        model: *mut GRBmodel,
        ignore: *mut GRBmodel,
        hint: *mut GRBmodel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBsync(model: *mut GRBmodel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GRBpingserver(
        server: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
