/* automatically generated by rust-bindgen 0.57.0 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const GLP_MAJOR_VERSION: u32 = 5;
pub const GLP_MINOR_VERSION: u32 = 0;
pub const GLP_MIN: u32 = 1;
pub const GLP_MAX: u32 = 2;
pub const GLP_CV: u32 = 1;
pub const GLP_IV: u32 = 2;
pub const GLP_BV: u32 = 3;
pub const GLP_FR: u32 = 1;
pub const GLP_LO: u32 = 2;
pub const GLP_UP: u32 = 3;
pub const GLP_DB: u32 = 4;
pub const GLP_FX: u32 = 5;
pub const GLP_BS: u32 = 1;
pub const GLP_NL: u32 = 2;
pub const GLP_NU: u32 = 3;
pub const GLP_NF: u32 = 4;
pub const GLP_NS: u32 = 5;
pub const GLP_SF_GM: u32 = 1;
pub const GLP_SF_EQ: u32 = 16;
pub const GLP_SF_2N: u32 = 32;
pub const GLP_SF_SKIP: u32 = 64;
pub const GLP_SF_AUTO: u32 = 128;
pub const GLP_SOL: u32 = 1;
pub const GLP_IPT: u32 = 2;
pub const GLP_MIP: u32 = 3;
pub const GLP_UNDEF: u32 = 1;
pub const GLP_FEAS: u32 = 2;
pub const GLP_INFEAS: u32 = 3;
pub const GLP_NOFEAS: u32 = 4;
pub const GLP_OPT: u32 = 5;
pub const GLP_UNBND: u32 = 6;
pub const GLP_BF_LUF: u32 = 0;
pub const GLP_BF_BTF: u32 = 16;
pub const GLP_BF_FT: u32 = 1;
pub const GLP_BF_BG: u32 = 2;
pub const GLP_BF_GR: u32 = 3;
pub const GLP_MSG_OFF: u32 = 0;
pub const GLP_MSG_ERR: u32 = 1;
pub const GLP_MSG_ON: u32 = 2;
pub const GLP_MSG_ALL: u32 = 3;
pub const GLP_MSG_DBG: u32 = 4;
pub const GLP_PRIMAL: u32 = 1;
pub const GLP_DUALP: u32 = 2;
pub const GLP_DUAL: u32 = 3;
pub const GLP_PT_STD: u32 = 17;
pub const GLP_PT_PSE: u32 = 34;
pub const GLP_RT_STD: u32 = 17;
pub const GLP_RT_HAR: u32 = 34;
pub const GLP_RT_FLIP: u32 = 51;
pub const GLP_USE_AT: u32 = 1;
pub const GLP_USE_NT: u32 = 2;
pub const GLP_ORD_NONE: u32 = 0;
pub const GLP_ORD_QMD: u32 = 1;
pub const GLP_ORD_AMD: u32 = 2;
pub const GLP_ORD_SYMAMD: u32 = 3;
pub const GLP_BR_FFV: u32 = 1;
pub const GLP_BR_LFV: u32 = 2;
pub const GLP_BR_MFV: u32 = 3;
pub const GLP_BR_DTH: u32 = 4;
pub const GLP_BR_PCH: u32 = 5;
pub const GLP_BT_DFS: u32 = 1;
pub const GLP_BT_BFS: u32 = 2;
pub const GLP_BT_BLB: u32 = 3;
pub const GLP_BT_BPH: u32 = 4;
pub const GLP_PP_NONE: u32 = 0;
pub const GLP_PP_ROOT: u32 = 1;
pub const GLP_PP_ALL: u32 = 2;
pub const GLP_RF_REG: u32 = 0;
pub const GLP_RF_LAZY: u32 = 1;
pub const GLP_RF_CUT: u32 = 2;
pub const GLP_RF_GMI: u32 = 1;
pub const GLP_RF_MIR: u32 = 2;
pub const GLP_RF_COV: u32 = 3;
pub const GLP_RF_CLQ: u32 = 4;
pub const GLP_ON: u32 = 1;
pub const GLP_OFF: u32 = 0;
pub const GLP_IROWGEN: u32 = 1;
pub const GLP_IBINGO: u32 = 2;
pub const GLP_IHEUR: u32 = 3;
pub const GLP_ICUTGEN: u32 = 4;
pub const GLP_IBRANCH: u32 = 5;
pub const GLP_ISELECT: u32 = 6;
pub const GLP_IPREPRO: u32 = 7;
pub const GLP_NO_BRNCH: u32 = 0;
pub const GLP_DN_BRNCH: u32 = 1;
pub const GLP_UP_BRNCH: u32 = 2;
pub const GLP_EBADB: u32 = 1;
pub const GLP_ESING: u32 = 2;
pub const GLP_ECOND: u32 = 3;
pub const GLP_EBOUND: u32 = 4;
pub const GLP_EFAIL: u32 = 5;
pub const GLP_EOBJLL: u32 = 6;
pub const GLP_EOBJUL: u32 = 7;
pub const GLP_EITLIM: u32 = 8;
pub const GLP_ETMLIM: u32 = 9;
pub const GLP_ENOPFS: u32 = 10;
pub const GLP_ENODFS: u32 = 11;
pub const GLP_EROOT: u32 = 12;
pub const GLP_ESTOP: u32 = 13;
pub const GLP_EMIPGAP: u32 = 14;
pub const GLP_ENOFEAS: u32 = 15;
pub const GLP_ENOCVG: u32 = 16;
pub const GLP_EINSTAB: u32 = 17;
pub const GLP_EDATA: u32 = 18;
pub const GLP_ERANGE: u32 = 19;
pub const GLP_KKT_PE: u32 = 1;
pub const GLP_KKT_PB: u32 = 2;
pub const GLP_KKT_DE: u32 = 3;
pub const GLP_KKT_DB: u32 = 4;
pub const GLP_KKT_CS: u32 = 5;
pub const GLP_MPS_DECK: u32 = 1;
pub const GLP_MPS_FILE: u32 = 2;
pub const GLP_ASN_MIN: u32 = 1;
pub const GLP_ASN_MAX: u32 = 2;
pub const GLP_ASN_MMP: u32 = 3;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_prob {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glp_bfcp {
    pub msg_lev: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub lu_size: ::std::os::raw::c_int,
    pub piv_tol: f64,
    pub piv_lim: ::std::os::raw::c_int,
    pub suhl: ::std::os::raw::c_int,
    pub eps_tol: f64,
    pub max_gro: f64,
    pub nfs_max: ::std::os::raw::c_int,
    pub upd_tol: f64,
    pub nrs_max: ::std::os::raw::c_int,
    pub rs_size: ::std::os::raw::c_int,
    pub foo_bar: [f64; 38usize],
}
#[test]
fn bindgen_test_layout_glp_bfcp() {
    assert_eq!(
        ::std::mem::size_of::<glp_bfcp>(),
        376usize,
        concat!("Size of: ", stringify!(glp_bfcp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_bfcp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_bfcp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).msg_lev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(msg_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).lu_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(lu_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).piv_tol as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(piv_tol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).piv_lim as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(piv_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).suhl as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(suhl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).eps_tol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(eps_tol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).max_gro as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(max_gro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).nfs_max as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(nfs_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).upd_tol as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(upd_tol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).nrs_max as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(nrs_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).rs_size as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(rs_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_bfcp>())).foo_bar as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_bfcp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glp_smcp {
    pub msg_lev: ::std::os::raw::c_int,
    pub meth: ::std::os::raw::c_int,
    pub pricing: ::std::os::raw::c_int,
    pub r_test: ::std::os::raw::c_int,
    pub tol_bnd: f64,
    pub tol_dj: f64,
    pub tol_piv: f64,
    pub obj_ll: f64,
    pub obj_ul: f64,
    pub it_lim: ::std::os::raw::c_int,
    pub tm_lim: ::std::os::raw::c_int,
    pub out_frq: ::std::os::raw::c_int,
    pub out_dly: ::std::os::raw::c_int,
    pub presolve: ::std::os::raw::c_int,
    pub excl: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
    pub aorn: ::std::os::raw::c_int,
    pub foo_bar: [f64; 33usize],
}
#[test]
fn bindgen_test_layout_glp_smcp() {
    assert_eq!(
        ::std::mem::size_of::<glp_smcp>(),
        352usize,
        concat!("Size of: ", stringify!(glp_smcp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_smcp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_smcp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).msg_lev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(msg_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).meth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).pricing as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(pricing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).r_test as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(r_test)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).tol_bnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(tol_bnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).tol_dj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(tol_dj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).tol_piv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(tol_piv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).obj_ll as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(obj_ll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).obj_ul as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(obj_ul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).it_lim as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(it_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).tm_lim as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(tm_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).out_frq as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(out_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).out_dly as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(out_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).presolve as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(presolve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).excl as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(excl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).shift as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).aorn as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(aorn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_smcp>())).foo_bar as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_smcp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glp_iptcp {
    pub msg_lev: ::std::os::raw::c_int,
    pub ord_alg: ::std::os::raw::c_int,
    pub foo_bar: [f64; 48usize],
}
#[test]
fn bindgen_test_layout_glp_iptcp() {
    assert_eq!(
        ::std::mem::size_of::<glp_iptcp>(),
        392usize,
        concat!("Size of: ", stringify!(glp_iptcp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_iptcp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_iptcp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iptcp>())).msg_lev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iptcp),
            "::",
            stringify!(msg_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iptcp>())).ord_alg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iptcp),
            "::",
            stringify!(ord_alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iptcp>())).foo_bar as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iptcp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_tree {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_iocp {
    pub msg_lev: ::std::os::raw::c_int,
    pub br_tech: ::std::os::raw::c_int,
    pub bt_tech: ::std::os::raw::c_int,
    pub tol_int: f64,
    pub tol_obj: f64,
    pub tm_lim: ::std::os::raw::c_int,
    pub out_frq: ::std::os::raw::c_int,
    pub out_dly: ::std::os::raw::c_int,
    pub cb_func: ::std::option::Option<
        unsafe extern "C" fn(T: *mut glp_tree, info: *mut ::std::os::raw::c_void),
    >,
    pub cb_info: *mut ::std::os::raw::c_void,
    pub cb_size: ::std::os::raw::c_int,
    pub pp_tech: ::std::os::raw::c_int,
    pub mip_gap: f64,
    pub mir_cuts: ::std::os::raw::c_int,
    pub gmi_cuts: ::std::os::raw::c_int,
    pub cov_cuts: ::std::os::raw::c_int,
    pub clq_cuts: ::std::os::raw::c_int,
    pub presolve: ::std::os::raw::c_int,
    pub binarize: ::std::os::raw::c_int,
    pub fp_heur: ::std::os::raw::c_int,
    pub ps_heur: ::std::os::raw::c_int,
    pub ps_tm_lim: ::std::os::raw::c_int,
    pub sr_heur: ::std::os::raw::c_int,
    pub use_sol: ::std::os::raw::c_int,
    pub save_sol: *const ::std::os::raw::c_char,
    pub alien: ::std::os::raw::c_int,
    pub flip: ::std::os::raw::c_int,
    pub foo_bar: [f64; 23usize],
}
#[test]
fn bindgen_test_layout_glp_iocp() {
    assert_eq!(
        ::std::mem::size_of::<glp_iocp>(),
        328usize,
        concat!("Size of: ", stringify!(glp_iocp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_iocp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_iocp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).msg_lev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(msg_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).br_tech as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(br_tech)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).bt_tech as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(bt_tech)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).tol_int as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(tol_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).tol_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(tol_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).tm_lim as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(tm_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).out_frq as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(out_frq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).out_dly as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(out_dly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).cb_func as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(cb_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).cb_info as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(cb_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).cb_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(cb_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).pp_tech as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(pp_tech)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).mip_gap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(mip_gap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).mir_cuts as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(mir_cuts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).gmi_cuts as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(gmi_cuts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).cov_cuts as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(cov_cuts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).clq_cuts as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(clq_cuts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).presolve as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(presolve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).binarize as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(binarize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).fp_heur as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(fp_heur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).ps_heur as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(ps_heur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).ps_tm_lim as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(ps_tm_lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).sr_heur as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(sr_heur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).use_sol as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(use_sol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).save_sol as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(save_sol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).alien as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(alien)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).flip as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_iocp>())).foo_bar as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_iocp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_attr {
    pub level: ::std::os::raw::c_int,
    pub origin: ::std::os::raw::c_int,
    pub klass: ::std::os::raw::c_int,
    pub foo_bar: [f64; 7usize],
}
#[test]
fn bindgen_test_layout_glp_attr() {
    assert_eq!(
        ::std::mem::size_of::<glp_attr>(),
        72usize,
        concat!("Size of: ", stringify!(glp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_attr>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_attr),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_attr>())).origin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_attr),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_attr>())).klass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_attr),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_attr>())).foo_bar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_attr),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_mpscp {
    pub blank: ::std::os::raw::c_int,
    pub obj_name: *mut ::std::os::raw::c_char,
    pub tol_mps: f64,
    pub foo_bar: [f64; 17usize],
}
#[test]
fn bindgen_test_layout_glp_mpscp() {
    assert_eq!(
        ::std::mem::size_of::<glp_mpscp>(),
        160usize,
        concat!("Size of: ", stringify!(glp_mpscp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_mpscp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_mpscp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_mpscp>())).blank as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_mpscp),
            "::",
            stringify!(blank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_mpscp>())).obj_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_mpscp),
            "::",
            stringify!(obj_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_mpscp>())).tol_mps as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_mpscp),
            "::",
            stringify!(tol_mps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_mpscp>())).foo_bar as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_mpscp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_cpxcp {
    pub foo_bar: [f64; 20usize],
}
#[test]
fn bindgen_test_layout_glp_cpxcp() {
    assert_eq!(
        ::std::mem::size_of::<glp_cpxcp>(),
        160usize,
        concat!("Size of: ", stringify!(glp_cpxcp))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_cpxcp>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_cpxcp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_cpxcp>())).foo_bar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_cpxcp),
            "::",
            stringify!(foo_bar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_prep {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_tran {
    _unused: [u8; 0],
}
extern "C" {
    pub fn glp_create_prob() -> *mut glp_prob;
}
extern "C" {
    pub fn glp_set_prob_name(P: *mut glp_prob, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glp_set_obj_name(P: *mut glp_prob, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glp_set_obj_dir(P: *mut glp_prob, dir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_add_rows(P: *mut glp_prob, nrs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_add_cols(P: *mut glp_prob, ncs: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_set_row_name(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glp_set_col_name(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glp_set_row_bnds(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        lb: f64,
        ub: f64,
    );
}
extern "C" {
    pub fn glp_set_col_bnds(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        lb: f64,
        ub: f64,
    );
}
extern "C" {
    pub fn glp_set_obj_coef(P: *mut glp_prob, j: ::std::os::raw::c_int, coef: f64);
}
extern "C" {
    pub fn glp_set_mat_row(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        ind: *const ::std::os::raw::c_int,
        val: *const f64,
    );
}
extern "C" {
    pub fn glp_set_mat_col(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        ind: *const ::std::os::raw::c_int,
        val: *const f64,
    );
}
extern "C" {
    pub fn glp_load_matrix(
        P: *mut glp_prob,
        ne: ::std::os::raw::c_int,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        ar: *const f64,
    );
}
extern "C" {
    pub fn glp_check_dup(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        ne: ::std::os::raw::c_int,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_sort_matrix(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_del_rows(
        P: *mut glp_prob,
        nrs: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_del_cols(
        P: *mut glp_prob,
        ncs: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_copy_prob(dest: *mut glp_prob, prob: *mut glp_prob, names: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_erase_prob(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_delete_prob(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_get_prob_name(P: *mut glp_prob) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_get_obj_name(P: *mut glp_prob) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_get_obj_dir(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_num_rows(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_num_cols(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_row_name(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_get_col_name(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_get_row_type(P: *mut glp_prob, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_row_lb(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_row_ub(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_col_type(P: *mut glp_prob, j: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_col_lb(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_col_ub(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_obj_coef(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_num_nz(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_mat_row(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_mat_col(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_create_index(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_find_row(
        P: *mut glp_prob,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_find_col(
        P: *mut glp_prob,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_delete_index(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_set_rii(P: *mut glp_prob, i: ::std::os::raw::c_int, rii: f64);
}
extern "C" {
    pub fn glp_set_sjj(P: *mut glp_prob, j: ::std::os::raw::c_int, sjj: f64);
}
extern "C" {
    pub fn glp_get_rii(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_sjj(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_scale_prob(P: *mut glp_prob, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_unscale_prob(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_set_row_stat(
        P: *mut glp_prob,
        i: ::std::os::raw::c_int,
        stat: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_set_col_stat(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        stat: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_std_basis(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_adv_basis(P: *mut glp_prob, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_cpx_basis(P: *mut glp_prob);
}
extern "C" {
    pub fn glp_simplex(P: *mut glp_prob, parm: *const glp_smcp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_exact(P: *mut glp_prob, parm: *const glp_smcp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_init_smcp(parm: *mut glp_smcp);
}
extern "C" {
    pub fn glp_get_status(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_prim_stat(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_dual_stat(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_obj_val(P: *mut glp_prob) -> f64;
}
extern "C" {
    pub fn glp_get_row_stat(P: *mut glp_prob, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_row_prim(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_row_dual(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_col_stat(P: *mut glp_prob, j: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_col_prim(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_col_dual(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_get_unbnd_ray(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_it_cnt(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_set_it_cnt(P: *mut glp_prob, it_cnt: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_interior(P: *mut glp_prob, parm: *const glp_iptcp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_init_iptcp(parm: *mut glp_iptcp);
}
extern "C" {
    pub fn glp_ipt_status(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ipt_obj_val(P: *mut glp_prob) -> f64;
}
extern "C" {
    pub fn glp_ipt_row_prim(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_ipt_row_dual(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_ipt_col_prim(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_ipt_col_dual(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_set_col_kind(
        P: *mut glp_prob,
        j: ::std::os::raw::c_int,
        kind: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_get_col_kind(P: *mut glp_prob, j: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_num_int(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_num_bin(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_intopt(P: *mut glp_prob, parm: *const glp_iocp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_init_iocp(parm: *mut glp_iocp);
}
extern "C" {
    pub fn glp_mip_status(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mip_obj_val(P: *mut glp_prob) -> f64;
}
extern "C" {
    pub fn glp_mip_row_val(P: *mut glp_prob, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_mip_col_val(P: *mut glp_prob, j: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_check_kkt(
        P: *mut glp_prob,
        sol: ::std::os::raw::c_int,
        cond: ::std::os::raw::c_int,
        ae_max: *mut f64,
        ae_ind: *mut ::std::os::raw::c_int,
        re_max: *mut f64,
        re_ind: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_print_sol(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_sol(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_sol(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_print_ranges(
        P: *mut glp_prob,
        len: ::std::os::raw::c_int,
        list: *const ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_print_ipt(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_ipt(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_ipt(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_print_mip(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_mip(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_mip(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_bf_exists(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_factorize(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_bf_updated(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_bfcp(P: *mut glp_prob, parm: *mut glp_bfcp);
}
extern "C" {
    pub fn glp_set_bfcp(P: *mut glp_prob, parm: *const glp_bfcp);
}
extern "C" {
    pub fn glp_get_bhead(P: *mut glp_prob, k: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_row_bind(P: *mut glp_prob, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_get_col_bind(P: *mut glp_prob, j: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ftran(P: *mut glp_prob, x: *mut f64);
}
extern "C" {
    pub fn glp_btran(P: *mut glp_prob, x: *mut f64);
}
extern "C" {
    pub fn glp_warm_up(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_eval_tab_row(
        P: *mut glp_prob,
        k: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_eval_tab_col(
        P: *mut glp_prob,
        k: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_transform_row(
        P: *mut glp_prob,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_transform_col(
        P: *mut glp_prob,
        len: ::std::os::raw::c_int,
        ind: *mut ::std::os::raw::c_int,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_prim_rtest(
        P: *mut glp_prob,
        len: ::std::os::raw::c_int,
        ind: *const ::std::os::raw::c_int,
        val: *const f64,
        dir: ::std::os::raw::c_int,
        eps: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_dual_rtest(
        P: *mut glp_prob,
        len: ::std::os::raw::c_int,
        ind: *const ::std::os::raw::c_int,
        val: *const f64,
        dir: ::std::os::raw::c_int,
        eps: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_analyze_bound(
        P: *mut glp_prob,
        k: ::std::os::raw::c_int,
        value1: *mut f64,
        var1: *mut ::std::os::raw::c_int,
        value2: *mut f64,
        var2: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_analyze_coef(
        P: *mut glp_prob,
        k: ::std::os::raw::c_int,
        coef1: *mut f64,
        var1: *mut ::std::os::raw::c_int,
        value1: *mut f64,
        coef2: *mut f64,
        var2: *mut ::std::os::raw::c_int,
        value2: *mut f64,
    );
}
extern "C" {
    pub fn glp_npp_alloc_wksp() -> *mut glp_prep;
}
extern "C" {
    pub fn glp_npp_load_prob(
        prep: *mut glp_prep,
        P: *mut glp_prob,
        sol: ::std::os::raw::c_int,
        names: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_npp_preprocess1(
        prep: *mut glp_prep,
        hard: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_npp_build_prob(prep: *mut glp_prep, Q: *mut glp_prob);
}
extern "C" {
    pub fn glp_npp_postprocess(prep: *mut glp_prep, Q: *mut glp_prob);
}
extern "C" {
    pub fn glp_npp_obtain_sol(prep: *mut glp_prep, P: *mut glp_prob);
}
extern "C" {
    pub fn glp_npp_free_wksp(prep: *mut glp_prep);
}
extern "C" {
    pub fn glp_ios_reason(T: *mut glp_tree) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_get_prob(T: *mut glp_tree) -> *mut glp_prob;
}
extern "C" {
    pub fn glp_ios_tree_size(
        T: *mut glp_tree,
        a_cnt: *mut ::std::os::raw::c_int,
        n_cnt: *mut ::std::os::raw::c_int,
        t_cnt: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_ios_curr_node(T: *mut glp_tree) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_next_node(T: *mut glp_tree, p: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_prev_node(T: *mut glp_tree, p: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_up_node(T: *mut glp_tree, p: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_node_level(T: *mut glp_tree, p: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_node_bound(T: *mut glp_tree, p: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn glp_ios_best_node(T: *mut glp_tree) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_mip_gap(T: *mut glp_tree) -> f64;
}
extern "C" {
    pub fn glp_ios_node_data(
        T: *mut glp_tree,
        p: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glp_ios_row_attr(T: *mut glp_tree, i: ::std::os::raw::c_int, attr: *mut glp_attr);
}
extern "C" {
    pub fn glp_ios_pool_size(T: *mut glp_tree) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_add_row(
        T: *mut glp_tree,
        name: *const ::std::os::raw::c_char,
        klass: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        ind: *const ::std::os::raw::c_int,
        val: *const f64,
        type_: ::std::os::raw::c_int,
        rhs: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_del_row(T: *mut glp_tree, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_ios_clear_pool(T: *mut glp_tree);
}
extern "C" {
    pub fn glp_ios_can_branch(T: *mut glp_tree, j: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_branch_upon(
        T: *mut glp_tree,
        j: ::std::os::raw::c_int,
        sel: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_ios_select_node(T: *mut glp_tree, p: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_ios_heur_sol(T: *mut glp_tree, x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_ios_terminate(T: *mut glp_tree);
}
extern "C" {
    pub fn glp_init_mpscp(parm: *mut glp_mpscp);
}
extern "C" {
    pub fn glp_read_mps(
        P: *mut glp_prob,
        fmt: ::std::os::raw::c_int,
        parm: *const glp_mpscp,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_mps(
        P: *mut glp_prob,
        fmt: ::std::os::raw::c_int,
        parm: *const glp_mpscp,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_init_cpxcp(parm: *mut glp_cpxcp);
}
extern "C" {
    pub fn glp_read_lp(
        P: *mut glp_prob,
        parm: *const glp_cpxcp,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_lp(
        P: *mut glp_prob,
        parm: *const glp_cpxcp,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_prob(
        P: *mut glp_prob,
        flags: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_prob(
        P: *mut glp_prob,
        flags: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mpl_alloc_wksp() -> *mut glp_tran;
}
extern "C" {
    pub fn glp_mpl_init_rand(tran: *mut glp_tran, seed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_mpl_read_model(
        tran: *mut glp_tran,
        fname: *const ::std::os::raw::c_char,
        skip: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mpl_read_data(
        tran: *mut glp_tran,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mpl_generate(
        tran: *mut glp_tran,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mpl_build_prob(tran: *mut glp_tran, prob: *mut glp_prob);
}
extern "C" {
    pub fn glp_mpl_postsolve(
        tran: *mut glp_tran,
        prob: *mut glp_prob,
        sol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mpl_free_wksp(tran: *mut glp_tran);
}
extern "C" {
    pub fn glp_read_cnfsat(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_check_cnfsat(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_cnfsat(
        P: *mut glp_prob,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_minisat1(P: *mut glp_prob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_intfeas1(
        P: *mut glp_prob,
        use_bound: ::std::os::raw::c_int,
        obj_bound: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_init_env() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_config(option: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glp_free_env() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_puts(s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glp_printf(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn glp_vprintf(fmt: *const ::std::os::raw::c_char, arg: va_list);
}
extern "C" {
    pub fn glp_term_out(flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_term_hook(
        func: ::std::option::Option<
            unsafe extern "C" fn(
                info: *mut ::std::os::raw::c_void,
                s: *const ::std::os::raw::c_char,
            ) -> ::std::os::raw::c_int,
        >,
        info: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glp_open_tee(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_close_tee() -> ::std::os::raw::c_int;
}
pub type glp_errfunc =
    ::std::option::Option<unsafe extern "C" fn(fmt: *const ::std::os::raw::c_char, ...)>;
extern "C" {
    pub fn glp_error_(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> glp_errfunc;
}
extern "C" {
    pub fn glp_at_error() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_assert_(
        expr: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_error_hook(
        func: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
        info: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glp_alloc(
        n: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glp_realloc(
        ptr: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glp_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn glp_mem_limit(limit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_mem_usage(
        count: *mut ::std::os::raw::c_int,
        cpeak: *mut ::std::os::raw::c_int,
        total: *mut size_t,
        tpeak: *mut size_t,
    );
}
extern "C" {
    pub fn glp_time() -> f64;
}
extern "C" {
    pub fn glp_difftime(t1: f64, t0: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_graph {
    pub pool: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
    pub nv_max: ::std::os::raw::c_int,
    pub nv: ::std::os::raw::c_int,
    pub na: ::std::os::raw::c_int,
    pub v: *mut *mut glp_vertex,
    pub index: *mut ::std::os::raw::c_void,
    pub v_size: ::std::os::raw::c_int,
    pub a_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_glp_graph() {
    assert_eq!(
        ::std::mem::size_of::<glp_graph>(),
        56usize,
        concat!("Size of: ", stringify!(glp_graph))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_graph>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_graph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).nv_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(nv_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).nv as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).na as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(na)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).v as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).index as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).v_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(v_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_graph>())).a_size as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_graph),
            "::",
            stringify!(a_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_vertex {
    pub i: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub entry: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub temp: *mut ::std::os::raw::c_void,
    pub in_: *mut glp_arc,
    pub out: *mut glp_arc,
}
#[test]
fn bindgen_test_layout_glp_vertex() {
    assert_eq!(
        ::std::mem::size_of::<glp_vertex>(),
        56usize,
        concat!("Size of: ", stringify!(glp_vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_vertex>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_vertex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).temp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).in_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_vertex>())).out as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_vertex),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glp_arc {
    pub tail: *mut glp_vertex,
    pub head: *mut glp_vertex,
    pub data: *mut ::std::os::raw::c_void,
    pub temp: *mut ::std::os::raw::c_void,
    pub t_prev: *mut glp_arc,
    pub t_next: *mut glp_arc,
    pub h_prev: *mut glp_arc,
    pub h_next: *mut glp_arc,
}
#[test]
fn bindgen_test_layout_glp_arc() {
    assert_eq!(
        ::std::mem::size_of::<glp_arc>(),
        64usize,
        concat!("Size of: ", stringify!(glp_arc))
    );
    assert_eq!(
        ::std::mem::align_of::<glp_arc>(),
        8usize,
        concat!("Alignment of ", stringify!(glp_arc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).tail as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).temp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).t_prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(t_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).t_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(t_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).h_prev as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(h_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glp_arc>())).h_next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glp_arc),
            "::",
            stringify!(h_next)
        )
    );
}
extern "C" {
    pub fn glp_create_graph(
        v_size: ::std::os::raw::c_int,
        a_size: ::std::os::raw::c_int,
    ) -> *mut glp_graph;
}
extern "C" {
    pub fn glp_set_graph_name(G: *mut glp_graph, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glp_add_vertices(
        G: *mut glp_graph,
        nadd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_set_vertex_name(
        G: *mut glp_graph,
        i: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glp_add_arc(
        G: *mut glp_graph,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> *mut glp_arc;
}
extern "C" {
    pub fn glp_del_vertices(
        G: *mut glp_graph,
        ndel: ::std::os::raw::c_int,
        num: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_del_arc(G: *mut glp_graph, a: *mut glp_arc);
}
extern "C" {
    pub fn glp_erase_graph(
        G: *mut glp_graph,
        v_size: ::std::os::raw::c_int,
        a_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_delete_graph(G: *mut glp_graph);
}
extern "C" {
    pub fn glp_create_v_index(G: *mut glp_graph);
}
extern "C" {
    pub fn glp_find_vertex(
        G: *mut glp_graph,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_delete_v_index(G: *mut glp_graph);
}
extern "C" {
    pub fn glp_read_graph(
        G: *mut glp_graph,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_graph(
        G: *mut glp_graph,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mincost_lp(
        P: *mut glp_prob,
        G: *mut glp_graph,
        names: ::std::os::raw::c_int,
        v_rhs: ::std::os::raw::c_int,
        a_low: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_mincost_okalg(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_low: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        sol: *mut f64,
        a_x: ::std::os::raw::c_int,
        v_pi: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_mincost_relax4(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_low: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        crash: ::std::os::raw::c_int,
        sol: *mut f64,
        a_x: ::std::os::raw::c_int,
        a_rc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_maxflow_lp(
        P: *mut glp_prob,
        G: *mut glp_graph,
        names: ::std::os::raw::c_int,
        s: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glp_maxflow_ffalg(
        G: *mut glp_graph,
        s: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        sol: *mut f64,
        a_x: ::std::os::raw::c_int,
        v_cut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_check_asnprob(
        G: *mut glp_graph,
        v_set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_asnprob_lp(
        P: *mut glp_prob,
        form: ::std::os::raw::c_int,
        G: *mut glp_graph,
        names: ::std::os::raw::c_int,
        v_set: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_asnprob_okalg(
        form: ::std::os::raw::c_int,
        G: *mut glp_graph,
        v_set: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        sol: *mut f64,
        a_x: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_asnprob_hall(
        G: *mut glp_graph,
        v_set: ::std::os::raw::c_int,
        a_x: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_cpp(
        G: *mut glp_graph,
        v_t: ::std::os::raw::c_int,
        v_es: ::std::os::raw::c_int,
        v_ls: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn glp_read_mincost(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_low: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_mincost(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_low: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_maxflow(
        G: *mut glp_graph,
        s: *mut ::std::os::raw::c_int,
        t: *mut ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_maxflow(
        G: *mut glp_graph,
        s: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_asnprob(
        G: *mut glp_graph,
        v_set: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_asnprob(
        G: *mut glp_graph,
        v_set: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_read_ccdata(
        G: *mut glp_graph,
        v_wgt: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_write_ccdata(
        G: *mut glp_graph,
        v_wgt: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_netgen(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        parm: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_netgen_prob(nprob: ::std::os::raw::c_int, parm: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn glp_gridgen(
        G: *mut glp_graph,
        v_rhs: ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        a_cost: ::std::os::raw::c_int,
        parm: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_rmfgen(
        G: *mut glp_graph,
        s: *mut ::std::os::raw::c_int,
        t: *mut ::std::os::raw::c_int,
        a_cap: ::std::os::raw::c_int,
        parm: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_weak_comp(G: *mut glp_graph, v_num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_strong_comp(
        G: *mut glp_graph,
        v_num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_top_sort(G: *mut glp_graph, v_num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glp_wclique_exact(
        G: *mut glp_graph,
        v_wgt: ::std::os::raw::c_int,
        sol: *mut f64,
        v_set: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
